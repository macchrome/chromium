From: chromium-sdk <project_26591639_bot@noreply.gitlab.com>
Date: Mon, 21 Aug 2023 18:20:44 +0200
Subject: eyeo Browser Ad filtering Solution: Android API Module

Based on Chromium 117.0.5938.0

Pre-requisites: eyeo Browser Ad filtering Solution: Base Module
---
 chrome/android/BUILD.gn                       |   9 +
 chrome/browser/BUILD.gn                       |  14 +
 chrome/browser/android/adblock/adblock_jni.cc | 194 +++++++
 chrome/browser/android/adblock/adblock_jni.h  |  53 ++
 .../android/adblock/adblock_jni_factory.cc    |  72 +++
 .../android/adblock/adblock_jni_factory.h     |  50 ++
 .../filtering_configuration_bindings.cc       | 250 ++++++++
 .../filtering_configuration_bindings.h        |  69 +++
 ...iltering_configuration_bindings_factory.cc |  70 +++
 ...filtering_configuration_bindings_factory.h |  51 ++
 ...source_classification_notifier_bindings.cc | 191 ++++++
 ...esource_classification_notifier_bindings.h |  69 +++
 ...lassification_notifier_bindings_factory.cc |  71 +++
 ...classification_notifier_bindings_factory.h |  52 ++
 ...hrome_browser_main_extra_parts_profiles.cc |  10 +
 components/adblock/android/BUILD.gn           | 111 ++++
 .../adblock_settings_locales_titles.xml       |  98 ++++
 .../adblock/AdblockContentType.java           |  62 ++
 .../components/adblock/AdblockController.java | 258 +++++++++
 .../components/adblock/AdblockCounters.java   | 101 ++++
 .../adblock/FilteringConfiguration.java       | 245 ++++++++
 .../ResourceClassificationNotifier.java       | 187 ++++++
 .../adblock/AdblockControllerTest.java        |  87 +++
 .../adblock/FilteringConfigurationTest.java   | 366 ++++++++++++
 .../ResourceClassificationNotifierTest.java   | 143 +++++
 .../adblock/TestAdBlockedObserver.java        | 183 ++++++
 .../adblock/TestPagesCircumventionTest.java   |  90 +++
 .../components/adblock/TestPagesCspTest.java  | 136 +++++
 .../adblock/TestPagesElemhideEmuInvTest.java  | 158 +++++
 .../adblock/TestPagesElemhideEmuTest.java     | 217 +++++++
 .../adblock/TestPagesElemhideTest.java        | 237 ++++++++
 .../adblock/TestPagesExceptionTest.java       | 244 ++++++++
 .../adblock/TestPagesFilterTest.java          | 329 +++++++++++
 .../adblock/TestPagesHeaderFilterTest.java    | 150 +++++
 .../adblock/TestPagesRewriteTest.java         | 185 ++++++
 .../adblock/TestPagesSiteKeyTest.java         |  82 +++
 .../adblock/TestPagesSnippetsTest.java        | 545 ++++++++++++++++++
 .../adblock/TestPagesTestsHelper.java         | 255 ++++++++
 .../adblock/TestPagesWebsocketTest.java       |  77 +++
 .../adblock/TestVerificationUtils.java        | 166 ++++++
 40 files changed, 5937 insertions(+)
 create mode 100644 chrome/browser/android/adblock/adblock_jni.cc
 create mode 100644 chrome/browser/android/adblock/adblock_jni.h
 create mode 100644 chrome/browser/android/adblock/adblock_jni_factory.cc
 create mode 100644 chrome/browser/android/adblock/adblock_jni_factory.h
 create mode 100644 chrome/browser/android/adblock/filtering_configuration_bindings.cc
 create mode 100644 chrome/browser/android/adblock/filtering_configuration_bindings.h
 create mode 100644 chrome/browser/android/adblock/filtering_configuration_bindings_factory.cc
 create mode 100644 chrome/browser/android/adblock/filtering_configuration_bindings_factory.h
 create mode 100644 chrome/browser/android/adblock/resource_classification_notifier_bindings.cc
 create mode 100644 chrome/browser/android/adblock/resource_classification_notifier_bindings.h
 create mode 100644 chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.cc
 create mode 100644 chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h
 create mode 100644 components/adblock/android/BUILD.gn
 create mode 100644 components/adblock/android/java/res/values/adblock_settings_locales_titles.xml
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/AdblockContentType.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/AdblockCounters.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
 create mode 100644 components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/ResourceClassificationNotifierTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestAdBlockedObserver.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesTestsHelper.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTest.java
 create mode 100644 components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java

diff --git a/chrome/android/BUILD.gn b/chrome/android/BUILD.gn
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -1,6 +1,10 @@
 # Copyright 2014 The Chromium Authors
 # Use of this source code is governed by a BSD-style license that can be
 # found in the LICENSE file.
+#
+# This source code is a part of eyeo Chromium SDK.
+# Use of this source code is governed by the GPLv3 that can be found in the components/adblock/LICENSE file.
+
 
 import("//build/android/resource_sizes.gni")
 import("//build/config/android/config.gni")
@@ -206,6 +210,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/ui/android/toolbar:java_resources",
       "//chrome/browser/ui/android/webid/internal:java_resources",
       "//chrome/browser/ui/messages/android:java_resources",
+      "//components/adblock/android:java_resources",
       "//components/autofill/android:autofill_java_resources",
       "//components/autofill/android:autofill_payments_java_resources",
       "//components/blocked_content/android:java_resources",
@@ -446,6 +451,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/browser/xsurface:java",
       "//chrome/browser/xsurface_provider:dependency_provider_impl_java",
       "//chrome/browser/xsurface_provider:java",
+      "//components/adblock/android:adblock_java",
       "//components/autofill/android:autofill_java",
       "//components/background_task_scheduler:background_task_scheduler_java",
       "//components/background_task_scheduler:background_task_scheduler_task_ids_java",
@@ -1662,6 +1668,7 @@ if (current_toolchain == default_toolchain) {
       "//chrome/test/android:chrome_java_integration_test_support",
       "//chrome/test/android:chrome_java_test_pagecontroller",
       "//chrome/test/android/test_trusted_web_activity:test_trusted_web_activity_java",
+      "//components/adblock/android:adblock_java_tests",
       "//components/autofill/android:autofill_features_java",
       "//components/autofill/android:autofill_java",
       "//components/background_task_scheduler:background_task_scheduler_java",
@@ -1858,6 +1865,7 @@ if (current_toolchain == default_toolchain) {
     srcjar_deps = [ "//chrome/browser:tos_dialog_behavior_generated_enum" ]
 
     data = [
+      "//chrome/test/data/adblock/",
       "//chrome/test/data/android/",
       "//chrome/test/data/autofill/",
       "//chrome/test/data/background_sync/",
@@ -3624,6 +3632,7 @@ group("jni_headers") {
     "//chrome/browser/ui/messages/android:jni_headers",
     "//chrome/browser/util:jni_headers",
     "//chrome/browser/webauthn/android:jni_headers",
+    "//components/adblock/android:jni_headers",
     "//components/content_relationship_verification/android:jni_headers",
     "//components/image_fetcher:jni_headers",
     "//components/media_router/browser/android:jni_headers",
diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -3371,6 +3371,20 @@ static_library("browser") {
       "webauthn/android/webauthn_request_delegate_android.cc",
       "webauthn/android/webauthn_request_delegate_android.h",
 
+      ### Android API module start
+      "android/adblock/adblock_jni.cc",
+      "android/adblock/adblock_jni.h",
+      "android/adblock/adblock_jni_factory.cc",
+      "android/adblock/adblock_jni_factory.h",
+      "android/adblock/filtering_configuration_bindings_factory.cc",
+      "android/adblock/filtering_configuration_bindings_factory.h",
+      "android/adblock/filtering_configuration_bindings.cc",
+      "android/adblock/filtering_configuration_bindings.h",
+      "android/adblock/resource_classification_notifier_bindings_factory.cc",
+      "android/adblock/resource_classification_notifier_bindings_factory.h",
+      "android/adblock/resource_classification_notifier_bindings.cc",
+      "android/adblock/resource_classification_notifier_bindings.h",
+      ### Android API module end
     ]
 
     public_deps += [
diff --git a/chrome/browser/android/adblock/adblock_jni.cc b/chrome/browser/android/adblock/adblock_jni.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/adblock_jni.cc
@@ -0,0 +1,194 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+#include "chrome/browser/android/adblock/adblock_jni.h"
+
+#include <algorithm>
+#include <iterator>
+#include <vector>
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/android/jni_weak_ref.h"
+#include "base/logging.h"
+#include "chrome/browser/adblock/adblock_controller_factory.h"
+#include "chrome/browser/android/adblock/adblock_jni_factory.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "components/adblock/android/jni_headers/AdblockController_jni.h"
+#include "content/public/browser/browser_thread.h"
+
+using base::android::AttachCurrentThread;
+using base::android::CheckException;
+using base::android::ConvertJavaStringToUTF8;
+using base::android::ConvertUTF8ToJavaString;
+using base::android::GetClass;
+using base::android::JavaParamRef;
+using base::android::JavaRef;
+using base::android::MethodID;
+using base::android::ScopedJavaGlobalRef;
+using base::android::ScopedJavaLocalRef;
+using base::android::ToJavaArrayOfObjects;
+using base::android::ToJavaArrayOfStrings;
+
+namespace adblock {
+
+namespace {
+
+AdblockController* GetController() {
+  if (!g_browser_process || !g_browser_process->profile_manager()) {
+    return nullptr;
+  }
+  return AdblockControllerFactory::GetForBrowserContext(
+      g_browser_process->profile_manager()->GetLastUsedProfile());
+}
+
+AdblockJNI* GetJNI() {
+  if (!g_browser_process || !g_browser_process->profile_manager()) {
+    return nullptr;
+  }
+  return AdblockJNIFactory::GetForBrowserContext(
+      g_browser_process->profile_manager()->GetLastUsedProfile());
+}
+
+ScopedJavaLocalRef<jobject> ToJava(JNIEnv* env,
+                                   ScopedJavaLocalRef<jclass>& url_class,
+                                   jmethodID& url_constructor,
+                                   const std::string& url,
+                                   const std::string& title,
+                                   const std::string& version,
+                                   const std::vector<std::string>& languages) {
+  ScopedJavaLocalRef<jobject> url_param(
+      env, env->NewObject(url_class.obj(), url_constructor,
+                          ConvertUTF8ToJavaString(env, url).obj()));
+  CheckException(env);
+  return Java_Subscription_Constructor(env, url_param,
+                                       ConvertUTF8ToJavaString(env, title),
+                                       ConvertUTF8ToJavaString(env, version),
+                                       ToJavaArrayOfStrings(env, languages));
+}
+
+std::vector<ScopedJavaLocalRef<jobject>> CSubscriptionsToJObjects(
+    JNIEnv* env,
+    const std::vector<scoped_refptr<Subscription>>& subscriptions) {
+  ScopedJavaLocalRef<jclass> url_class = GetClass(env, "java/net/URL");
+  jmethodID url_constructor = MethodID::Get<MethodID::TYPE_INSTANCE>(
+      env, url_class.obj(), "<init>", "(Ljava/lang/String;)V");
+  std::vector<ScopedJavaLocalRef<jobject>> jobjects;
+  jobjects.reserve(subscriptions.size());
+  for (auto& sub : subscriptions) {
+    jobjects.push_back(ToJava(
+        env, url_class, url_constructor, sub->GetSourceUrl().spec(),
+        sub->GetTitle(), sub->GetCurrentVersion(), std::vector<std::string>{}));
+  }
+  return jobjects;
+}
+
+std::vector<ScopedJavaLocalRef<jobject>> CSubscriptionsToJObjects(
+    JNIEnv* env,
+    std::vector<KnownSubscriptionInfo>& subscriptions) {
+  ScopedJavaLocalRef<jclass> url_class = GetClass(env, "java/net/URL");
+  jmethodID url_constructor = MethodID::Get<MethodID::TYPE_INSTANCE>(
+      env, url_class.obj(), "<init>", "(Ljava/lang/String;)V");
+  std::vector<ScopedJavaLocalRef<jobject>> jobjects;
+  jobjects.reserve(subscriptions.size());
+  for (auto& sub : subscriptions) {
+    if (sub.ui_visibility == SubscriptionUiVisibility::Visible) {
+      // The checks here are when one makes f.e. adblock:custom visible
+      DCHECK(sub.url.is_valid());
+      if (sub.url.is_valid()) {
+        jobjects.push_back(ToJava(env, url_class, url_constructor,
+                                  sub.url.spec(), sub.title, "",
+                                  sub.languages));
+      }
+    }
+  }
+  return jobjects;
+}
+
+}  // namespace
+
+AdblockJNI::AdblockJNI(SubscriptionService* subscription_service)
+    : subscription_service_(subscription_service) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if (subscription_service_) {
+    subscription_service_->AddObserver(this);
+  }
+}
+
+AdblockJNI::~AdblockJNI() {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  if (subscription_service_) {
+    subscription_service_->RemoveObserver(this);
+  }
+}
+
+void AdblockJNI::Bind(JavaObjectWeakGlobalRef weak_java_controller) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  weak_java_controller_ = weak_java_controller;
+}
+
+void AdblockJNI::OnSubscriptionInstalled(const GURL& url) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  JNIEnv* env = AttachCurrentThread();
+  ScopedJavaLocalRef<jobject> obj = weak_java_controller_.get(env);
+  if (obj.is_null()) {
+    return;
+  }
+
+  ScopedJavaLocalRef<jstring> j_url = ConvertUTF8ToJavaString(env, url.spec());
+  Java_AdblockController_subscriptionUpdatedCallback(env, obj, j_url);
+}
+
+}  // namespace adblock
+
+static void JNI_AdblockController_Bind(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jobject>& caller) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  if (!adblock::GetController()) {
+    return;
+  }
+  JavaObjectWeakGlobalRef weak_controller_ref(env, caller);
+  adblock::GetJNI()->Bind(weak_controller_ref);
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_AdblockController_GetInstalledSubscriptions(JNIEnv* env) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  if (!adblock::GetController()) {
+    return ToJavaArrayOfObjects(env,
+                                std::vector<ScopedJavaLocalRef<jobject>>{});
+  }
+
+  return ToJavaArrayOfObjects(
+      env, adblock::CSubscriptionsToJObjects(
+               env, adblock::GetController()->GetInstalledSubscriptions()));
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_AdblockController_GetRecommendedSubscriptions(JNIEnv* env) {
+  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
+  if (!adblock::GetController()) {
+    return ToJavaArrayOfObjects(env,
+                                std::vector<ScopedJavaLocalRef<jobject>>{});
+  }
+
+  auto list = adblock::GetController()->GetKnownSubscriptions();
+  return ToJavaArrayOfObjects(env,
+                              adblock::CSubscriptionsToJObjects(env, list));
+}
diff --git a/chrome/browser/android/adblock/adblock_jni.h b/chrome/browser/android/adblock/adblock_jni.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/adblock_jni.h
@@ -0,0 +1,53 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_H_
+
+#include <string>
+
+#include "base/android/jni_weak_ref.h"
+#include "base/memory/raw_ptr.h"
+#include "components/adblock/core/adblock_controller.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/keyed_service/core/keyed_service.h"
+
+namespace content {
+class BrowserContext;
+}
+
+namespace adblock {
+
+class AdblockJNI : public SubscriptionService::SubscriptionObserver,
+                   public KeyedService {
+ public:
+  explicit AdblockJNI(SubscriptionService* subscription_service);
+  ~AdblockJNI() override;
+
+  void Bind(JavaObjectWeakGlobalRef weak_java_controller);
+  // SubscriptionService::SubscriptionObserver
+  void OnSubscriptionInstalled(const GURL& subscription_url) override;
+
+ private:
+  SEQUENCE_CHECKER(sequence_checker_);
+  raw_ptr<SubscriptionService> subscription_service_;
+  JavaObjectWeakGlobalRef weak_java_controller_;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_H_
diff --git a/chrome/browser/android/adblock/adblock_jni_factory.cc b/chrome/browser/android/adblock/adblock_jni_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/adblock_jni_factory.cc
@@ -0,0 +1,72 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/android/adblock/adblock_jni_factory.h"
+
+#include <memory>
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/android/adblock/adblock_jni.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+// static
+AdblockJNI* AdblockJNIFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<AdblockJNI*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+AdblockJNIFactory* AdblockJNIFactory::GetInstance() {
+  static base::NoDestructor<AdblockJNIFactory> instance;
+  return instance.get();
+}
+
+AdblockJNIFactory::AdblockJNIFactory()
+    : BrowserContextKeyedServiceFactory(
+          "AdblockJNI",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(SubscriptionServiceFactory::GetInstance());
+}
+
+AdblockJNIFactory::~AdblockJNIFactory() = default;
+
+KeyedService* AdblockJNIFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new AdblockJNI(
+      SubscriptionServiceFactory::GetForBrowserContext(context));
+}
+
+content::BrowserContext* AdblockJNIFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+bool AdblockJNIFactory::ServiceIsCreatedWithBrowserContext() const {
+  // This avoids manual instantiation in chrome_browser_main.cc
+  return true;
+}
+
+bool AdblockJNIFactory::ServiceIsNULLWhileTesting() const {
+  return true;
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/android/adblock/adblock_jni_factory.h b/chrome/browser/android/adblock/adblock_jni_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/adblock_jni_factory.h
@@ -0,0 +1,50 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_FACTORY_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class AdblockJNI;
+class AdblockJNIFactory : public BrowserContextKeyedServiceFactory {
+ public:
+ public:
+  static AdblockJNI* GetForBrowserContext(content::BrowserContext* context);
+  static AdblockJNIFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<AdblockJNIFactory>;
+  AdblockJNIFactory();
+  ~AdblockJNIFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+  bool ServiceIsCreatedWithBrowserContext() const override;
+  bool ServiceIsNULLWhileTesting() const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_ADBLOCK_JNI_FACTORY_H_
diff --git a/chrome/browser/android/adblock/filtering_configuration_bindings.cc b/chrome/browser/android/adblock/filtering_configuration_bindings.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/filtering_configuration_bindings.cc
@@ -0,0 +1,250 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/android/adblock/filtering_configuration_bindings.h"
+
+#include <iterator>
+#include <memory>
+
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/ranges/algorithm.h"
+#include "chrome/browser/android/adblock/filtering_configuration_bindings_factory.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "components/adblock/android/jni_headers/FilteringConfiguration_jni.h"
+#include "components/adblock/core/configuration/filtering_configuration.h"
+#include "components/adblock/core/configuration/persistent_filtering_configuration.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+
+namespace adblock {
+
+FilteringConfigurationBindings::FilteringConfigurationBindings(
+    SubscriptionService* subscription_service,
+    PrefService* pref_service)
+    : subscription_service_(subscription_service),
+      pref_service_(pref_service) {}
+
+FilteringConfigurationBindings::~FilteringConfigurationBindings() {
+  for (auto& pair : bound_counterparts_) {
+    pair.first->RemoveObserver(this);
+  }
+}
+
+void FilteringConfigurationBindings::Bind(
+    const std::string& configuration_name,
+    JavaObjectWeakGlobalRef filtering_configuration_java) {
+  auto* existing_configuration =
+      GetInstalledConfigurationWithName(configuration_name);
+  if (existing_configuration) {
+    auto existing_binding = bound_counterparts_.find(existing_configuration);
+    if (existing_binding == bound_counterparts_.end()) {
+      // This is the first Java-side counterpart bound to this
+      // FilteringConfiguration.
+      existing_configuration->AddObserver(this);
+    }
+    bound_counterparts_[existing_configuration].push_back(
+        std::move(filtering_configuration_java));
+  } else {
+    // There is no already-installed FilteringConfiguration with this name.
+    // Create one and bind to it.
+    auto new_filtering_configuration =
+        std::make_unique<PersistentFilteringConfiguration>(pref_service_,
+                                                           configuration_name);
+    new_filtering_configuration->AddObserver(this);
+    bound_counterparts_[new_filtering_configuration.get()].push_back(
+        std::move(filtering_configuration_java));
+    subscription_service_->InstallFilteringConfiguration(
+        std::move(new_filtering_configuration));
+  }
+}
+
+FilteringConfiguration*
+FilteringConfigurationBindings::GetInstalledConfigurationWithName(
+    const std::string& configuration_name) {
+  const auto installed_configurations =
+      subscription_service_->GetInstalledFilteringConfigurations();
+  auto existing_configuration_it =
+      base::ranges::find(installed_configurations, configuration_name,
+                         &FilteringConfiguration::GetName);
+  return existing_configuration_it != installed_configurations.end()
+             ? *existing_configuration_it
+             : nullptr;
+}
+
+void FilteringConfigurationBindings::OnEnabledStateChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_enabledStateChanged);
+}
+
+void FilteringConfigurationBindings::OnFilterListsChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_filterListsChanged);
+}
+
+void FilteringConfigurationBindings::OnAllowedDomainsChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_allowedDomainsChanged);
+}
+
+void FilteringConfigurationBindings::OnCustomFiltersChanged(
+    FilteringConfiguration* config) {
+  Notify(config, Java_FilteringConfiguration_customFiltersChanged);
+}
+
+void FilteringConfigurationBindings::Notify(
+    FilteringConfiguration* config,
+    FilteringConfigurationBindings::JavaEventListener event_listener_function) {
+  auto bound_weak_refs = bound_counterparts_.find(config);
+  DCHECK(bound_weak_refs != bound_counterparts_.end())
+      << "This should never receive notifications from unobserved "
+         "FilteringConfigurations";
+  JNIEnv* env = base::android::AttachCurrentThread();
+  for (auto& weak_ref : bound_weak_refs->second) {
+    auto java_counterpart = weak_ref.get(env);
+    if (java_counterpart.is_null()) {
+      continue;  // Bound counterpart may have been destroyed on Java side
+    }
+    event_listener_function(env, java_counterpart);
+  }
+}
+
+}  // namespace adblock
+
+adblock::FilteringConfigurationBindings& GetBindingsFromLastUsedProfile() {
+  auto* bindings =
+      adblock::FilteringConfigurationBindingsFactory::GetForBrowserContext(
+          g_browser_process->profile_manager()->GetLastUsedProfile());
+  DCHECK(bindings) << "FilteringConfigurationBindings should be non-null even "
+                      "in tests, to keep the code simple";
+  return *bindings;
+}
+
+adblock::FilteringConfiguration& GetConfigurationWithName(
+    const base::android::JavaParamRef<jstring>& configuration_name) {
+  auto& bindings = GetBindingsFromLastUsedProfile();
+  auto* configuration = bindings.GetInstalledConfigurationWithName(
+      base::android::ConvertJavaStringToUTF8(configuration_name));
+  DCHECK(configuration)
+      << "FilteringConfigurationBindings::Bind should have ensured a "
+         "configuration with this name is installed";
+  return *configuration;
+}
+
+static void JNI_FilteringConfiguration_Bind(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jobject>& caller) {
+  auto& bindings = GetBindingsFromLastUsedProfile();
+  JavaObjectWeakGlobalRef weak_configuration_ref(env, caller);
+  auto cpp_name = base::android::ConvertJavaStringToUTF8(configuration_name);
+  bindings.Bind(cpp_name, weak_configuration_ref);
+}
+
+static jboolean JNI_FilteringConfiguration_IsEnabled(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name) {
+  return GetConfigurationWithName(configuration_name).IsEnabled() ? JNI_TRUE
+                                                                  : JNI_FALSE;
+}
+
+static void JNI_FilteringConfiguration_SetEnabled(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    jboolean j_enabled) {
+  return GetConfigurationWithName(configuration_name)
+      .SetEnabled(j_enabled == JNI_TRUE);
+}
+
+static void JNI_FilteringConfiguration_AddFilterList(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& url) {
+  GetConfigurationWithName(configuration_name)
+      .AddFilterList(GURL{base::android::ConvertJavaStringToUTF8(url)});
+}
+
+static void JNI_FilteringConfiguration_RemoveFilterList(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& url) {
+  GetConfigurationWithName(configuration_name)
+      .RemoveFilterList(GURL{base::android::ConvertJavaStringToUTF8(url)});
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_FilteringConfiguration_GetFilterLists(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name) {
+  // For simplicity, convert GURL to std::string, pass to Java, and convert from
+  // String to URL. Strings are easier to pass through JNI.
+  std::vector<std::string> urls;
+  base::ranges::transform(
+      GetConfigurationWithName(configuration_name).GetFilterLists(),
+      std::back_inserter(urls), &GURL::spec);
+  return base::android::ToJavaArrayOfStrings(env, urls);
+}
+
+static void JNI_FilteringConfiguration_AddAllowedDomain(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& allowed_domain) {
+  GetConfigurationWithName(configuration_name)
+      .AddAllowedDomain(base::android::ConvertJavaStringToUTF8(allowed_domain));
+}
+
+static void JNI_FilteringConfiguration_RemoveAllowedDomain(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& allowed_domain) {
+  GetConfigurationWithName(configuration_name)
+      .RemoveAllowedDomain(ConvertJavaStringToUTF8(allowed_domain));
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_FilteringConfiguration_GetAllowedDomains(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name) {
+  return base::android::ToJavaArrayOfStrings(
+      env, GetConfigurationWithName(configuration_name).GetAllowedDomains());
+}
+
+static void JNI_FilteringConfiguration_AddCustomFilter(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& custom_filter) {
+  GetConfigurationWithName(configuration_name)
+      .AddCustomFilter(ConvertJavaStringToUTF8(custom_filter));
+}
+
+static void JNI_FilteringConfiguration_RemoveCustomFilter(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name,
+    const base::android::JavaParamRef<jstring>& custom_filter) {
+  GetConfigurationWithName(configuration_name)
+      .RemoveCustomFilter(
+          base::android::ConvertJavaStringToUTF8(custom_filter));
+}
+
+static base::android::ScopedJavaLocalRef<jobjectArray>
+JNI_FilteringConfiguration_GetCustomFilters(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jstring>& configuration_name) {
+  return base::android::ToJavaArrayOfStrings(
+      env, GetConfigurationWithName(configuration_name).GetCustomFilters());
+}
diff --git a/chrome/browser/android/adblock/filtering_configuration_bindings.h b/chrome/browser/android/adblock/filtering_configuration_bindings.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/filtering_configuration_bindings.h
@@ -0,0 +1,69 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_H_
+
+#include <map>
+#include <utility>
+#include <vector>
+#include "base/android/jni_weak_ref.h"
+#include "base/memory/raw_ptr.h"
+#include "base/sequence_checker.h"
+#include "components/adblock/core/configuration/filtering_configuration.h"
+#include "components/adblock/core/subscription/subscription_service.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "components/prefs/pref_service.h"
+
+namespace adblock {
+
+class FilteringConfigurationBindings : public KeyedService,
+                                       public FilteringConfiguration::Observer {
+ public:
+  explicit FilteringConfigurationBindings(
+      SubscriptionService* subscription_service,
+      PrefService* pref_service);
+  ~FilteringConfigurationBindings() override;
+  void Bind(const std::string& configuration_name,
+            JavaObjectWeakGlobalRef filtering_configuration_java);
+  FilteringConfiguration* GetInstalledConfigurationWithName(
+      const std::string& name);
+
+  // FilteringConfiguration::Observer:
+  void OnEnabledStateChanged(FilteringConfiguration* config) override;
+  void OnFilterListsChanged(FilteringConfiguration* config) override;
+  void OnAllowedDomainsChanged(FilteringConfiguration* config) override;
+  void OnCustomFiltersChanged(FilteringConfiguration* config) override;
+
+ private:
+  using JavaEventListener = void(JNIEnv* env,
+                                 const base::android::JavaRef<jobject>& obj);
+  void Notify(FilteringConfiguration* config,
+              JavaEventListener event_listener_function);
+  SEQUENCE_CHECKER(sequence_checker_);
+  raw_ptr<SubscriptionService> subscription_service_;
+  raw_ptr<PrefService> pref_service_;
+  // There may be multiple Java-side FilteringConfiguration instances
+  // (represented by JavaObjectWeakGlobalRef) that map to a single C++
+  // FilteringConfiguration.
+  using WeakReferences = std::vector<JavaObjectWeakGlobalRef>;
+  std::map<FilteringConfiguration*, WeakReferences> bound_counterparts_;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_H_
diff --git a/chrome/browser/android/adblock/filtering_configuration_bindings_factory.cc b/chrome/browser/android/adblock/filtering_configuration_bindings_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/filtering_configuration_bindings_factory.cc
@@ -0,0 +1,70 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/android/adblock/filtering_configuration_bindings_factory.h"
+
+#include "chrome/browser/adblock/subscription_service_factory.h"
+#include "chrome/browser/android/adblock/filtering_configuration_bindings.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "chrome/browser/profiles/profile.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+
+namespace adblock {
+
+// static
+FilteringConfigurationBindings*
+FilteringConfigurationBindingsFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<FilteringConfigurationBindings*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+FilteringConfigurationBindingsFactory*
+FilteringConfigurationBindingsFactory::GetInstance() {
+  static base::NoDestructor<FilteringConfigurationBindingsFactory> instance;
+  return instance.get();
+}
+
+FilteringConfigurationBindingsFactory::FilteringConfigurationBindingsFactory()
+    : BrowserContextKeyedServiceFactory(
+          "FilteringConfigurationBindings",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(SubscriptionServiceFactory::GetInstance());
+}
+
+FilteringConfigurationBindingsFactory::
+    ~FilteringConfigurationBindingsFactory() = default;
+
+KeyedService* FilteringConfigurationBindingsFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new FilteringConfigurationBindings(
+      SubscriptionServiceFactory::GetForBrowserContext(context),
+      Profile::FromBrowserContext(context)->GetPrefs());
+}
+
+content::BrowserContext*
+FilteringConfigurationBindingsFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+bool FilteringConfigurationBindingsFactory::ServiceIsCreatedWithBrowserContext()
+    const {
+  return true;
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/android/adblock/filtering_configuration_bindings_factory.h b/chrome/browser/android/adblock/filtering_configuration_bindings_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/filtering_configuration_bindings_factory.h
@@ -0,0 +1,51 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_FACTORY_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class FilteringConfigurationBindings;
+class FilteringConfigurationBindingsFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+ public:
+  static FilteringConfigurationBindings* GetForBrowserContext(
+      content::BrowserContext* context);
+  static FilteringConfigurationBindingsFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<FilteringConfigurationBindingsFactory>;
+  FilteringConfigurationBindingsFactory();
+  ~FilteringConfigurationBindingsFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+  bool ServiceIsCreatedWithBrowserContext() const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_FILTERING_CONFIGURATION_BINDINGS_FACTORY_H_
diff --git a/chrome/browser/android/adblock/resource_classification_notifier_bindings.cc b/chrome/browser/android/adblock/resource_classification_notifier_bindings.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/resource_classification_notifier_bindings.cc
@@ -0,0 +1,191 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/android/adblock/resource_classification_notifier_bindings.h"
+
+#include <iterator>
+#include <memory>
+
+#include "base/android/jni_android.h"
+#include "base/android/jni_array.h"
+#include "base/android/jni_string.h"
+#include "base/ranges/algorithm.h"
+#include "chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h"
+#include "chrome/browser/android/tab_android.h"
+#include "chrome/browser/browser_process.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/profiles/profile_manager.h"
+#include "components/adblock/android/jni_headers/ResourceClassificationNotifier_jni.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/adblock/core/common/adblock_utils.h"
+
+namespace adblock {
+namespace {
+
+constexpr int kNoId = -1;
+
+int GetTabId(content::RenderFrameHost* render_frame_host) {
+  auto* web_contents =
+      content::WebContents::FromRenderFrameHost(render_frame_host);
+  if (!web_contents) {
+    return kNoId;
+  }
+
+  auto* tab = TabAndroid::FromWebContents(web_contents);
+  if (!tab) {
+    return kNoId;
+  }
+
+  return tab->GetAndroidId();
+}
+
+}  // namespace
+
+using base::android::AttachCurrentThread;
+using base::android::CheckException;
+using base::android::ConvertJavaStringToUTF8;
+using base::android::ConvertUTF8ToJavaString;
+using base::android::GetClass;
+using base::android::JavaParamRef;
+using base::android::JavaRef;
+using base::android::MethodID;
+using base::android::ScopedJavaGlobalRef;
+using base::android::ScopedJavaLocalRef;
+using base::android::ToJavaArrayOfObjects;
+using base::android::ToJavaArrayOfStrings;
+
+ResourceClassificationNotifierBindings::ResourceClassificationNotifierBindings(
+    ResourceClassificationRunner* classification_runner)
+    : classification_runner_(classification_runner) {
+  classification_runner_->AddObserver(this);
+}
+
+ResourceClassificationNotifierBindings::
+    ~ResourceClassificationNotifierBindings() {
+  classification_runner_->RemoveObserver(this);
+}
+
+void ResourceClassificationNotifierBindings::Bind(
+    JavaObjectWeakGlobalRef resource_classifier_java) {
+  bound_counterpart_ = resource_classifier_java;
+}
+
+void ResourceClassificationNotifierBindings::OnAdMatched(
+    const GURL& url,
+    FilterMatchResult result,
+    const std::vector<GURL>& parent_frame_urls,
+    ContentType content_type,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DCHECK(result == FilterMatchResult::kBlockRule ||
+         result == FilterMatchResult::kAllowRule);
+  const bool was_blocked = result == FilterMatchResult::kBlockRule;
+  DVLOG(3) << "[eyeo] Ad matched " << url << "(type: " << content_type
+           << (was_blocked ? ", blocked" : ", allowed") << ")";
+  JNIEnv* env = AttachCurrentThread();
+
+  ScopedJavaLocalRef<jobject> obj = bound_counterpart_.get(env);
+  if (obj.is_null()) {
+    return;
+  }
+
+  ScopedJavaLocalRef<jstring> j_url = ConvertUTF8ToJavaString(env, url.spec());
+  ScopedJavaLocalRef<jobjectArray> j_parents =
+      ToJavaArrayOfStrings(env, adblock::utils::ConvertURLs(parent_frame_urls));
+  ScopedJavaLocalRef<jstring> j_subscription =
+      ConvertUTF8ToJavaString(env, subscription.spec());
+  ScopedJavaLocalRef<jstring> j_configuration =
+      ConvertUTF8ToJavaString(env, configuration_name);
+  int tab_id = GetTabId(render_frame_host);
+  Java_ResourceClassificationNotifier_adMatchedCallback(
+      env, obj, j_url, was_blocked, j_parents, j_subscription, j_configuration,
+      static_cast<int>(content_type), tab_id);
+}
+
+void ResourceClassificationNotifierBindings::OnPageAllowed(
+    const GURL& url,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DVLOG(3) << "[eyeo] Page allowed " << url;
+  JNIEnv* env = AttachCurrentThread();
+
+  ScopedJavaLocalRef<jobject> obj = bound_counterpart_.get(env);
+  if (obj.is_null()) {
+    return;
+  }
+
+  ScopedJavaLocalRef<jstring> j_url = ConvertUTF8ToJavaString(env, url.spec());
+  ScopedJavaLocalRef<jstring> j_subscription =
+      ConvertUTF8ToJavaString(env, subscription.spec());
+  ScopedJavaLocalRef<jstring> j_configuration =
+      ConvertUTF8ToJavaString(env, configuration_name);
+  int tab_id = GetTabId(render_frame_host);
+  Java_ResourceClassificationNotifier_pageAllowedCallback(
+      env, obj, j_url, j_subscription, j_configuration, tab_id);
+}
+
+void ResourceClassificationNotifierBindings::OnPopupMatched(
+    const GURL& url,
+    FilterMatchResult result,
+    const GURL& opener_url,
+    content::RenderFrameHost* render_frame_host,
+    const GURL& subscription,
+    const std::string& configuration_name) {
+  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+  DCHECK(render_frame_host);
+  DCHECK(result == FilterMatchResult::kBlockRule ||
+         result == FilterMatchResult::kAllowRule);
+  const bool was_blocked = result == FilterMatchResult::kBlockRule;
+  DVLOG(3) << "[eyeo] Popup matched " << url
+           << (was_blocked ? ", blocked" : ", allowed");
+  JNIEnv* env = AttachCurrentThread();
+
+  ScopedJavaLocalRef<jobject> obj = bound_counterpart_.get(env);
+  if (obj.is_null()) {
+    return;
+  }
+
+  ScopedJavaLocalRef<jstring> j_url = ConvertUTF8ToJavaString(env, url.spec());
+  ScopedJavaLocalRef<jstring> j_opener =
+      ConvertUTF8ToJavaString(env, opener_url.spec());
+  ScopedJavaLocalRef<jstring> j_subscription =
+      ConvertUTF8ToJavaString(env, subscription.spec());
+  ScopedJavaLocalRef<jstring> j_configuration =
+      ConvertUTF8ToJavaString(env, configuration_name);
+  int tab_id = GetTabId(render_frame_host);
+  Java_ResourceClassificationNotifier_popupMatchedCallback(
+      env, obj, j_url, was_blocked, j_opener, j_subscription, j_configuration,
+      tab_id);
+}
+
+}  // namespace adblock
+
+static void JNI_ResourceClassificationNotifier_Bind(
+    JNIEnv* env,
+    const base::android::JavaParamRef<jobject>& caller) {
+  auto* bindings = adblock::ResourceClassificationNotifierBindingsFactory::
+      GetForBrowserContext(ProfileManager::GetLastUsedProfile());
+  DCHECK(bindings);
+
+  bindings->Bind(JavaObjectWeakGlobalRef(env, caller));
+}
diff --git a/chrome/browser/android/adblock/resource_classification_notifier_bindings.h b/chrome/browser/android/adblock/resource_classification_notifier_bindings.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/resource_classification_notifier_bindings.h
@@ -0,0 +1,69 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_H_
+
+#include <utility>
+#include <vector>
+#include "base/android/jni_weak_ref.h"
+#include "base/memory/raw_ptr.h"
+#include "base/sequence_checker.h"
+#include "components/adblock/content/browser/resource_classification_runner.h"
+#include "components/keyed_service/core/keyed_service.h"
+#include "components/prefs/pref_service.h"
+
+namespace adblock {
+
+class ResourceClassificationNotifierBindings
+    : public KeyedService,
+      public ResourceClassificationRunner::Observer {
+ public:
+  explicit ResourceClassificationNotifierBindings(
+      ResourceClassificationRunner* classification_runner);
+  ~ResourceClassificationNotifierBindings() override;
+
+  void Bind(JavaObjectWeakGlobalRef resource_classifier_java);
+
+  // ResourceClassificationRunner::Observer
+  void OnAdMatched(const GURL& url,
+                   FilterMatchResult match_result,
+                   const std::vector<GURL>& parent_frame_urls,
+                   ContentType content_type,
+                   content::RenderFrameHost* render_frame_host,
+                   const GURL& subscription,
+                   const std::string& configuration_name) override;
+  void OnPageAllowed(const GURL& url,
+                     content::RenderFrameHost* render_frame_host,
+                     const GURL& subscription,
+                     const std::string& configuration_name) override;
+  void OnPopupMatched(const GURL& url,
+                      FilterMatchResult match_result,
+                      const GURL& opener_url,
+                      content::RenderFrameHost* render_frame_host,
+                      const GURL& subscription,
+                      const std::string& configuration_name) override;
+
+ private:
+  SEQUENCE_CHECKER(sequence_checker_);
+  raw_ptr<ResourceClassificationRunner> classification_runner_;
+  JavaObjectWeakGlobalRef bound_counterpart_;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_H_
diff --git a/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.cc b/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.cc
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.cc
@@ -0,0 +1,71 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#include "chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h"
+
+#include "chrome/browser/adblock/resource_classification_runner_factory.h"
+#include "chrome/browser/android/adblock/resource_classification_notifier_bindings.h"
+#include "chrome/browser/profiles/incognito_helpers.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+
+namespace adblock {
+
+// static
+ResourceClassificationNotifierBindings*
+ResourceClassificationNotifierBindingsFactory::GetForBrowserContext(
+    content::BrowserContext* context) {
+  return static_cast<ResourceClassificationNotifierBindings*>(
+      GetInstance()->GetServiceForBrowserContext(context, true));
+}
+// static
+ResourceClassificationNotifierBindingsFactory*
+ResourceClassificationNotifierBindingsFactory::GetInstance() {
+  static base::NoDestructor<ResourceClassificationNotifierBindingsFactory>
+      instance;
+  return instance.get();
+}
+
+ResourceClassificationNotifierBindingsFactory::
+    ResourceClassificationNotifierBindingsFactory()
+    : BrowserContextKeyedServiceFactory(
+          "ResourceClassificationNotifierBindings",
+          BrowserContextDependencyManager::GetInstance()) {
+  DependsOn(ResourceClassificationRunnerFactory::GetInstance());
+}
+
+ResourceClassificationNotifierBindingsFactory::
+    ~ResourceClassificationNotifierBindingsFactory() = default;
+
+KeyedService*
+ResourceClassificationNotifierBindingsFactory::BuildServiceInstanceFor(
+    content::BrowserContext* context) const {
+  return new ResourceClassificationNotifierBindings(
+      ResourceClassificationRunnerFactory::GetForBrowserContext(context));
+}
+
+content::BrowserContext*
+ResourceClassificationNotifierBindingsFactory::GetBrowserContextToUse(
+    content::BrowserContext* context) const {
+  return chrome::GetBrowserContextRedirectedInIncognito(context);
+}
+
+bool ResourceClassificationNotifierBindingsFactory::
+    ServiceIsCreatedWithBrowserContext() const {
+  return true;
+}
+
+}  // namespace adblock
diff --git a/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h b/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h
new file mode 100644
--- /dev/null
+++ b/chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h
@@ -0,0 +1,52 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+#ifndef CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_FACTORY_H_
+#define CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "components/keyed_service/content/browser_context_keyed_service_factory.h"
+#include "content/public/browser/browser_context.h"
+
+namespace adblock {
+
+class ResourceClassificationNotifierBindings;
+class ResourceClassificationNotifierBindingsFactory
+    : public BrowserContextKeyedServiceFactory {
+ public:
+ public:
+  static ResourceClassificationNotifierBindings* GetForBrowserContext(
+      content::BrowserContext* context);
+  static ResourceClassificationNotifierBindingsFactory* GetInstance();
+
+ private:
+  friend class base::NoDestructor<
+      ResourceClassificationNotifierBindingsFactory>;
+  ResourceClassificationNotifierBindingsFactory();
+  ~ResourceClassificationNotifierBindingsFactory() override;
+
+  // BrowserContextKeyedServiceFactory:
+  KeyedService* BuildServiceInstanceFor(
+      content::BrowserContext* context) const override;
+  content::BrowserContext* GetBrowserContextToUse(
+      content::BrowserContext* context) const override;
+  bool ServiceIsCreatedWithBrowserContext() const override;
+};
+
+}  // namespace adblock
+
+#endif  // CHROME_BROWSER_ANDROID_ADBLOCK_RESOURCE_CLASSIFICATION_NOTIFIER_BINDINGS_FACTORY_H_
diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -255,6 +255,11 @@
 #include "components/commerce/core/commerce_feature_list.h"
 #include "components/commerce/core/proto/merchant_signal_db_content.pb.h"
 
+// Android API module start
+#include "chrome/browser/android/adblock/adblock_jni_factory.h"
+#include "chrome/browser/android/adblock/filtering_configuration_bindings_factory.h"
+#include "chrome/browser/android/adblock/resource_classification_notifier_bindings_factory.h"
+// Android API module end
 
 #else
 #include "chrome/browser/accessibility/live_caption/live_caption_controller_factory.h"
@@ -741,6 +746,11 @@ void ChromeBrowserMainExtraPartsProfiles::
 #if BUILDFLAG(IS_ANDROID)
   FastCheckoutCapabilitiesFetcherFactory::GetInstance();
 
+  // Android API module start
+  adblock::AdblockJNIFactory::GetInstance();
+  adblock::FilteringConfigurationBindingsFactory::GetInstance();
+  adblock::ResourceClassificationNotifierBindingsFactory::GetInstance();
+  // Android API module end
 
 #endif
   FaviconServiceFactory::GetInstance();
diff --git a/components/adblock/android/BUILD.gn b/components/adblock/android/BUILD.gn
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/BUILD.gn
@@ -0,0 +1,111 @@
+# This file is part of eyeo Chromium SDK,
+# Copyright (C) 2006-present eyeo GmbH
+# eyeo Chromium SDK is free software: you can redistribute it and/or modify
+# it under the terms of the GNU General Public License version 3 as
+# published by the Free Software Foundation.
+# eyeo Chromium SDK is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+# You should have received a copy of the GNU General Public License
+# along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+
+
+import("//build/config/android/rules.gni")
+import("//build/config/locales.gni")
+import("//tools/grit/grit_rule.gni")
+
+android_library("adblock_java") {
+  sources = [
+    "java/src/org/chromium/components/adblock/AdblockContentType.java",
+    "java/src/org/chromium/components/adblock/AdblockController.java",
+    "java/src/org/chromium/components/adblock/AdblockCounters.java",
+    "java/src/org/chromium/components/adblock/FilteringConfiguration.java",
+    "java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java",
+  ]
+
+
+  deps = [
+    ":java_resources",
+    ":jni_headers",
+    "//base:base_java",
+    "//base:jni_java",
+    "//build/android:build_java",
+    "//chrome/browser/preferences:java",
+    "//chrome/browser/profiles/android:java",
+    "//content/public/android:content_full_java",
+    "//components/browser_ui/settings/android:java",
+    "//components/prefs/android:java",
+    "//components/user_prefs/android:java",
+    "//third_party/androidx:androidx_annotation_annotation_java",
+    "//third_party/androidx:androidx_fragment_fragment_java",
+    "//third_party/androidx:androidx_preference_preference_java",
+  ]
+
+  annotation_processor_deps = [ "//base/android/jni_generator:jni_processor" ]
+  resources_package = "org.chromium.components.adblock"
+}
+
+generate_jni("jni_headers") {
+  sources = [
+    "java/src/org/chromium/components/adblock/AdblockController.java",
+    "java/src/org/chromium/components/adblock/FilteringConfiguration.java",
+    "java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java",
+  ]
+}
+
+android_resources("java_resources") {
+  sources = [
+    "java/res/values/adblock_settings_locales_titles.xml",
+  ]
+}
+
+android_library("adblock_java_tests") {
+  testonly = true
+
+  sources = [
+    "javatests/src/org/chromium/components/adblock/AdblockControllerTest.java",
+    "javatests/src/org/chromium/components/adblock/FilteringConfigurationTest.java",
+    "javatests/src/org/chromium/components/adblock/ResourceClassificationNotifierTest.java",
+    "javatests/src/org/chromium/components/adblock/TestAdBlockedObserver.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesCircumventionTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesCspTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesElemhideTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesExceptionTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesFilterTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesRewriteTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesSnippetsTest.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesTestsHelper.java",
+    "javatests/src/org/chromium/components/adblock/TestPagesWebsocketTest.java",
+    "javatests/src/org/chromium/components/adblock/TestVerificationUtils.java",
+  ]
+
+
+  deps = [
+    ":adblock_java",
+    "//base:base_java",
+    "//base:base_java_test_support",
+    "//chrome/android:chrome_java",
+    "//chrome/browser/flags:java",
+    "//chrome/browser/settings:test_support_java",
+    "//chrome/browser/tab:java",
+    "//chrome/browser/tabmodel:java",
+    "//chrome/test/android:chrome_java_integration_test_support",
+    "//chrome/test/android:chrome_java_test_support_common",
+    "//components/infobars/android:java",
+    "//components/infobars/core:infobar_enums_java",
+    "//components/messages/android/test:test_support_java",
+    "//content/public/android:content_full_java",
+    "//content/public/android:content_main_dex_java",
+    "//content/public/test/android:content_java_test_support",
+    "//net/android:net_java_test_support",
+    "//third_party/androidx:androidx_test_monitor_java",
+    "//third_party/androidx:androidx_test_runner_java",
+    "//third_party/hamcrest:hamcrest_library_java",
+    "//third_party/junit:junit",
+  ]
+}
diff --git a/components/adblock/android/java/res/values/adblock_settings_locales_titles.xml b/components/adblock/android/java/res/values/adblock_settings_locales_titles.xml
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/res/values/adblock_settings_locales_titles.xml
@@ -0,0 +1,98 @@
+<!--
+  This file is part of eyeo Chromium SDK,
+  Copyright (C) 2006-present eyeo GmbH
+  eyeo Chromium SDK is free software: you can redistribute it and/or modify
+  it under the terms of the GNU General Public License version 3 as
+  published by the Free Software Foundation.
+  eyeo Chromium SDK is distributed in the hope that it will be useful,
+  but WITHOUT ANY WARRANTY; without even the implied warranty of
+  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+  GNU General Public License for more details.
+  You should have received a copy of the GNU General Public License
+  along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+-->
+
+<resources>
+    <!-- separator for the pairs (v) -->
+    <string name="fragment_adblock_general_separator" translatable="false">|</string>
+
+    <!--  locale + separator (^) + title -->
+    <array name="fragment_adblock_general_locale_title">
+        <item>af|Afrikaans</item>
+        <item>am|ኣማርኛ</item>
+        <item>ar|العربية</item>
+        <item>as|অসমীয়া</item>
+        <item>ast|Asturianu</item>
+        <item>az|Azərbaycan</item>
+        <item>be|Беларуская мова</item>
+        <item>bg|български</item>
+        <item>bn|বাংলা (ভারত)</item>
+        <item>br|ar brezhoneg</item>
+        <item>bs|bosanski</item>
+        <item>ca|català</item>
+        <item>cs|čeština</item>
+        <item>cy|Cymraeg</item>
+        <item>da|dansk</item>
+        <item>de|Deutsch</item>
+        <item>dsb|dolnoserbski</item>
+        <item>el|ελληνικά</item>
+        <item>en|English</item>
+        <item>eo|Esperanto</item>
+        <item>es|español</item>
+        <item>et|eesti keel</item>
+        <item>eu|euskara</item>
+        <item>fa|فارسى</item>
+        <item>fi|suomi</item>
+        <item>fil|Filipino</item>
+        <item>fr|français</item>
+        <item>fy|Frysk</item>
+        <item>gl|Galego</item>
+        <item>gu|ગુજરાતી (ભારત)</item>
+        <item>he|עברית</item>
+        <item>hi|हिन्दी</item>
+        <item>hr|Hrvatski</item>
+        <item>hsb|hornjoserbsce</item>
+        <item>hu|magyar</item>
+        <item>hy|Հայերեն</item>
+        <item>id|Bahasa Indonesia</item>
+        <item>is|Íslenska</item>
+        <item>it|italiano</item>
+        <item>ja|日本語</item>
+        <item>ka|ქართული</item>
+        <item>kab|Taqbaylit</item>
+        <item>kk|Қазақ тілі</item>
+        <item>kn|ಕನ್ನಡ</item>
+        <item>ko|한국어</item>
+        <item>lt|lietuvių kalba</item>
+        <item>lv|latviešu valoda</item>
+        <item>mg|Malagasy</item>
+        <item>mk|македонски</item>
+        <item>ml|മലയാളം</item>
+        <item>ms|Melayu</item>
+        <item>nb|norsk</item>
+        <item>nl|Nederlands</item>
+        <item>nn|norsk</item>
+        <item>pa|ਪੰਜਾਬੀ (ਭਾਰਤ)</item>
+        <item>pl|polski</item>
+        <item>pt|português</item>
+        <item>rm|rumantsch</item>
+        <item>ro|română</item>
+        <item>ru|Русский</item>
+        <item>si|සිංහල</item>
+        <item>sk|slovenčina</item>
+        <item>sl|slovenščina</item>
+        <item>sq|shqip</item>
+        <item>sr|српски</item>
+        <item>sv|svenska</item>
+        <item>sw|Kiswahili</item>
+        <item>ta|தமிழ்</item>
+        <item>te|తెలుగు</item>
+        <item>th|ภาษาไทย</item>
+        <item>tr|Türkçe</item>
+        <item>uk|українська</item>
+        <item>ur|اردو</item>
+        <item>uz|o’zbek</item>
+        <item>vi|Tiếng Việt</item>
+        <item>zh|中文</item>
+    </array>
+</resources>
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/AdblockContentType.java b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockContentType.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockContentType.java
@@ -0,0 +1,62 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import java.util.HashMap;
+import java.util.Map;
+
+public enum AdblockContentType {
+    // Note. This has to be kept in sync with c++ enum so some values
+    // are skipped
+    CONTENT_TYPE_OTHER(1 << 0),
+    CONTENT_TYPE_SCRIPT(1 << 1),
+    CONTENT_TYPE_IMAGE(1 << 2),
+    CONTENT_TYPE_STYLESHEET(1 << 3),
+    CONTENT_TYPE_OBJECT(1 << 4),
+    CONTENT_TYPE_SUBDOCUMENT(1 << 5),
+    CONTENT_TYPE_WEBSOCKET(1 << 7),
+    CONTENT_TYPE_WEBRTC(1 << 8),
+    CONTENT_TYPE_PING(1 << 10),
+    CONTENT_TYPE_XMLHTTPREQUEST(1 << 11),
+    CONTENT_TYPE_MEDIA(1 << 14),
+    CONTENT_TYPE_FONT(1 << 15);
+
+    private final int contentType;
+
+    private AdblockContentType(int contentType) {
+        this.contentType = contentType;
+    }
+
+    private static final Map<Integer, AdblockContentType> intToContentTypeMap =
+            new HashMap<Integer, AdblockContentType>();
+
+    static {
+        for (AdblockContentType type : AdblockContentType.values()) {
+            intToContentTypeMap.put(type.contentType, type);
+        }
+    }
+
+    public static AdblockContentType fromInt(int i) {
+        AdblockContentType type = intToContentTypeMap.get(Integer.valueOf(i));
+        return type;
+    }
+
+    public int getValue() {
+        return contentType;
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockController.java
@@ -0,0 +1,258 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.Log;
+import android.webkit.URLUtil;
+
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+import androidx.annotation.UiThread;
+
+import org.chromium.base.ContextUtils;
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.annotations.CalledByNative;
+import org.chromium.base.annotations.NativeMethods;
+import org.chromium.chrome.browser.preferences.Pref;
+import org.chromium.chrome.browser.profiles.Profile;
+import org.chromium.components.user_prefs.UserPrefs;
+
+import java.io.UnsupportedEncodingException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
+
+/**
+ * @brief Main access point for java UI code to control ad filtering.
+ * It calls its native counter part also AdblockController.
+ * It lives in UI thread on the browser process.
+ */
+public final class AdblockController extends FilteringConfiguration {
+    private static final String TAG = AdblockController.class.getSimpleName();
+
+    private static AdblockController sInstance;
+
+    private URL mAcceptableAds;
+
+    private AdblockController() {
+        super("adblock");
+        try {
+            mAcceptableAds =
+                    new URL("https://easylist-downloads.adblockplus.org/exceptionrules.txt");
+        } catch (java.net.MalformedURLException e) {
+            mAcceptableAds = null;
+        }
+    }
+
+    /**
+     * @return The singleton object.
+     */
+    public static AdblockController getInstance() {
+        ThreadUtils.assertOnUiThread();
+        if (sInstance == null) {
+            sInstance = new AdblockController();
+            AdblockControllerJni.get().bind(sInstance);
+        }
+        return sInstance;
+    }
+
+    public static class Subscription {
+        private URL mUrl;
+        private String mTitle;
+        private String mVersion = "";
+        private String[] mLanguages = {};
+
+        public Subscription(final URL url, final String title, final String version) {
+            this.mUrl = url;
+            this.mTitle = title;
+            this.mVersion = version;
+        }
+
+        @CalledByNative("Subscription")
+        public Subscription(
+                final URL url, final String title, final String version, final String[] languages) {
+            this.mUrl = url;
+            this.mTitle = title;
+            this.mVersion = version;
+            this.mLanguages = languages;
+        }
+
+        public String title() {
+            return mTitle;
+        }
+
+        public URL url() {
+            return mUrl;
+        }
+
+        public String version() {
+            return mVersion;
+        }
+
+        public String[] languages() {
+            return mLanguages;
+        }
+
+        @Override
+        public boolean equals(final Object object) {
+            if (object == null) return false;
+            if (getClass() != object.getClass()) return false;
+
+            Subscription other = (Subscription) object;
+            return url().equals(other.url());
+        }
+    }
+
+    @UiThread
+    public void setAcceptableAdsEnabled(boolean enabled) {
+        if (enabled)
+            addFilterList(mAcceptableAds);
+        else
+            removeFilterList(mAcceptableAds);
+    }
+
+    @UiThread
+    public boolean isAcceptableAdsEnabled() {
+        return getFilterLists().contains(mAcceptableAds);
+    }
+
+    @UiThread
+    public void setMoreOptionsEnabled(boolean enabled) {
+        UserPrefs.get(Profile.getLastUsedRegularProfile())
+                .setBoolean(Pref.ADBLOCK_MORE_OPTIONS_ENABLED, enabled);
+    }
+
+    @UiThread
+    public boolean areMoreOptionsEnabled() {
+        return UserPrefs.get(Profile.getLastUsedRegularProfile())
+                .getBoolean(Pref.ADBLOCK_MORE_OPTIONS_ENABLED);
+    }
+
+    @UiThread
+    public List<Subscription> getRecommendedSubscriptions(Context context) {
+        final List<Subscription> recommendedSubscriptions =
+                (List<Subscription>) (List<?>) Arrays.asList(
+                        AdblockControllerJni.get().getRecommendedSubscriptions());
+        final Map<String, String> localeToTitle = getLocaleToTitleMap(context);
+        for (int i = 0; i < recommendedSubscriptions.size(); ++i) {
+            for (final String language : recommendedSubscriptions.get(i).languages()) {
+                final String title = localeToTitle.get(language);
+                if (title != null && !title.isEmpty()) {
+                    recommendedSubscriptions.set(i,
+                            new Subscription(recommendedSubscriptions.get(i).url(), title,
+                                    "" /*version*/, recommendedSubscriptions.get(i).languages()));
+                    break;
+                }
+            }
+        }
+        return recommendedSubscriptions;
+    }
+
+    @UiThread
+    public void installSubscription(final URL url) {
+        addFilterList(url);
+    }
+
+    @UiThread
+    public void uninstallSubscription(final URL url) {
+        removeFilterList(url);
+    }
+
+    @UiThread
+    public List<Subscription> getInstalledSubscriptions() {
+        return (List<Subscription>) (List<?>) Arrays.asList(
+                AdblockControllerJni.get().getInstalledSubscriptions());
+    }
+
+    // TODO(mpawlowski) temporary pass-through, to enable gradual deprecation.
+    public interface AdBlockedObserver extends ResourceClassificationNotifier.AdBlockedObserver {}
+    // TODO(mpawlowski) deprecate and remove, use ResourceClassificationNotifier directly.
+    @UiThread
+    public void addOnAdBlockedObserver(
+            final ResourceClassificationNotifier.AdBlockedObserver observer) {
+        ResourceClassificationNotifier.getInstance().addOnAdBlockedObserver(observer);
+    }
+
+    // TODO(mpawlowski) deprecate and remove, use ResourceClassifier directly.
+    @UiThread
+    public void removeOnAdBlockedObserver(
+            final ResourceClassificationNotifier.AdBlockedObserver observer) {
+        ResourceClassificationNotifier.getInstance().removeOnAdBlockedObserver(observer);
+    }
+
+    private List<URL> transform(String[] urls) {
+        if (urls == null) return null;
+
+        List<URL> result = new ArrayList<URL>();
+        for (String url : urls) {
+            try {
+                result.add(new URL(URLUtil.guessUrl(url)));
+            } catch (MalformedURLException e) {
+                Log.e(TAG, "Error parsing url: " + url);
+            }
+        }
+
+        return result;
+    }
+
+    private Map<String, String> getLocaleToTitleMap(final Context context) {
+        final Resources resources = context.getResources();
+        final String[] locales =
+                resources.getStringArray(R.array.fragment_adblock_general_locale_title);
+        final String separator = resources.getString(R.string.fragment_adblock_general_separator);
+        final Map<String, String> localeToTitle = new HashMap<>(locales.length);
+        for (final String localeAndTitlePair : locales) {
+            // in `String.split()` separator is a regexp, but we want to treat it as a string
+            final int separatorIndex = localeAndTitlePair.indexOf(separator);
+            final String locale = localeAndTitlePair.substring(0, separatorIndex);
+            final String title = localeAndTitlePair.substring(separatorIndex + 1);
+            localeToTitle.put(locale, title);
+        }
+
+        return localeToTitle;
+    }
+
+    @CalledByNative
+    private void subscriptionUpdatedCallback(final String url) {
+        ThreadUtils.assertOnUiThread();
+        try {
+            URL subscriptionUrl = new URL(URLUtil.guessUrl(url));
+            for (final SubscriptionUpdateObserver observer : mSubscriptionUpdateObservers) {
+                observer.onSubscriptionDownloaded(subscriptionUrl);
+            }
+        } catch (MalformedURLException e) {
+            Log.e(TAG, "Error parsing subscription url: " + url);
+        }
+    }
+
+    @NativeMethods
+    interface Natives {
+        void bind(AdblockController caller);
+        Object[] getInstalledSubscriptions();
+        Object[] getRecommendedSubscriptions();
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/AdblockCounters.java b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockCounters.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/AdblockCounters.java
@@ -0,0 +1,101 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class AdblockCounters {
+    /**
+     * Immutable data-class containing an auxiliary information about resource event.
+     */
+    public static class ResourceInfo {
+        private final String mRequestUrl;
+        private final List<String> mParentFrameUrls;
+        private final String mSubscriptionUrl;
+        private final String mConfigurationName;
+        private final AdblockContentType mAdblockContentType;
+        private final int mTabId;
+
+        ResourceInfo(final String requestUrl, final List<String> parentFrameUrls,
+                final String subscriptionUrl, final String configurationName,
+                final int adblockContentType, final int tabId) {
+            this.mRequestUrl = requestUrl;
+            this.mParentFrameUrls = parentFrameUrls;
+            this.mSubscriptionUrl = subscriptionUrl;
+            this.mConfigurationName = configurationName;
+            this.mAdblockContentType = AdblockContentType.fromInt(adblockContentType);
+            this.mTabId = tabId;
+        }
+
+        /**
+         * @return The request which was blocked or allowed.
+         */
+        public String getRequestUrl() {
+            return mRequestUrl;
+        }
+
+        /**
+         * @return The parent frames of the mRequestUrl.
+         */
+        public List<String> getParentFrameUrls() {
+            return mParentFrameUrls;
+        }
+
+        /**
+         * @return Subscription url for filter done blocking or allowing decision,
+         * empty string otherwise.
+         */
+        public String getSubscription() {
+            return mSubscriptionUrl;
+        }
+
+        /**
+         * @return Configuration name containing subscription with matched filer for
+         * blocking or allowing decision, empty string otherwise.
+         */
+        public String getConfigurationName() {
+            return mConfigurationName;
+        }
+
+        /**
+         * @return The Adblock content type. See enum ContentType in
+         *         components/adblock/types.h
+         */
+        public AdblockContentType getAdblockContentType() {
+            return mAdblockContentType;
+        }
+
+        /**
+         * @return The current tab id for the mRequestUrl. -1 means no tab id, likely tab closed
+         *         before event arrived. Numbers start from 0.
+         */
+        public int getTabId() {
+            return mTabId;
+        }
+
+        @Override
+        public String toString() {
+            return "mRequestUrl: " + mRequestUrl + ", mParentFrameUrls: "
+                    + mParentFrameUrls.toString() + ", mSubscriptionUrl:" + mSubscriptionUrl
+                    + ", mConfigurationName:" + mConfigurationName + ", mAdblockContentType: "
+                    + mAdblockContentType.getValue() + ", mTabId: " + mTabId;
+        }
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java b/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/FilteringConfiguration.java
@@ -0,0 +1,245 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.Log;
+import android.webkit.URLUtil;
+
+import androidx.annotation.UiThread;
+
+import org.chromium.base.ContextUtils;
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.annotations.CalledByNative;
+import org.chromium.base.annotations.NativeMethods;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * @brief Represents an independent configuration of filters, filter lists,
+ * allowed domains and other settings that influence resource filtering and
+ * content blocking.
+ * Multiple Filtering Configurations can co-exist and be controlled separately.
+ * A network resource is blocked if any enabled Filtering Configuration
+ * determines it should be, through its filters.
+ * Elements on websites are hidden according to a superset of element-hiding
+ * selectors from all enabled Filtering Configurations.
+ * Lives on UI thread, not thread-safe.
+ */
+public class FilteringConfiguration {
+    private static final String TAG = FilteringConfiguration.class.getSimpleName();
+
+    private final Set<ConfigurationChangeObserver> mConfigurationChangeObservers = new HashSet<>();
+    protected final Set<SubscriptionUpdateObserver> mSubscriptionUpdateObservers = new HashSet<>();
+    private final String mName;
+
+    public interface ConfigurationChangeObserver {
+        /**
+         * Triggered when the FilteringConfiguration becomes disabled or enabled.
+         */
+        @UiThread
+        void onEnabledStateChanged();
+
+        /**
+         * Triggered when the collection of installed filter lists changes.
+         */
+        @UiThread
+        void onFilterListsChanged();
+
+        /**
+         * Triggered when the set of allowed domain changes.
+         */
+        @UiThread
+        void onAllowedDomainsChanged();
+
+        /**
+         * Triggered when the set of custom filters changes.
+         */
+        @UiThread
+        void onCustomFiltersChanged();
+    }
+
+    public interface SubscriptionUpdateObserver {
+        @UiThread
+        void onSubscriptionDownloaded(final URL url);
+    }
+
+    public FilteringConfiguration(String configuration_name) {
+        mName = configuration_name;
+        FilteringConfigurationJni.get().bind(mName, this);
+    }
+
+    @UiThread
+    public void addObserver(final ConfigurationChangeObserver observer) {
+        mConfigurationChangeObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeObserver(final ConfigurationChangeObserver observer) {
+        mConfigurationChangeObservers.remove(observer);
+    }
+
+    @UiThread
+    public void addSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mSubscriptionUpdateObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeSubscriptionUpdateObserver(final SubscriptionUpdateObserver observer) {
+        mSubscriptionUpdateObservers.remove(observer);
+    }
+
+    @UiThread
+    public void setEnabled(boolean enabled) {
+        FilteringConfigurationJni.get().setEnabled(mName, enabled);
+    }
+
+    @UiThread
+    public boolean isEnabled() {
+        return FilteringConfigurationJni.get().isEnabled(mName);
+    }
+
+    @UiThread
+    public void addFilterList(final URL url) {
+        FilteringConfigurationJni.get().addFilterList(mName, url.toString());
+    }
+
+    @UiThread
+    public void removeFilterList(final URL url) {
+        FilteringConfigurationJni.get().removeFilterList(mName, url.toString());
+    }
+
+    @UiThread
+    public List<URL> getFilterLists() {
+        List<String> filterListsStr =
+                Arrays.asList(FilteringConfigurationJni.get().getFilterLists(mName));
+        List<URL> filterLists = new ArrayList<URL>();
+        for (String url : filterListsStr) {
+            try {
+                filterLists.add(new URL(url));
+            } catch (MalformedURLException e) {
+                Log.e(TAG, "Received invalid subscription URL from C++: " + url);
+            }
+        }
+        return filterLists;
+    }
+
+    @UiThread
+    public void addAllowedDomain(final String domain) {
+        String sanitizedDomain = sanitizeSite(domain);
+        if (sanitizedDomain == null) return;
+        FilteringConfigurationJni.get().addAllowedDomain(mName, sanitizedDomain);
+    }
+
+    @UiThread
+    public void removeAllowedDomain(final String domain) {
+        String sanitizedDomain = sanitizeSite(domain);
+        if (sanitizedDomain == null) return;
+        FilteringConfigurationJni.get().removeAllowedDomain(mName, sanitizedDomain);
+    }
+
+    @UiThread
+    public List<String> getAllowedDomains() {
+        List<String> allowedDomains =
+                Arrays.asList(FilteringConfigurationJni.get().getAllowedDomains(mName));
+        Collections.sort(allowedDomains);
+        return allowedDomains;
+    }
+
+    @UiThread
+    public void addCustomFilter(final String filter) {
+        FilteringConfigurationJni.get().addCustomFilter(mName, filter);
+    }
+
+    @UiThread
+    public void removeCustomFilter(final String filter) {
+        FilteringConfigurationJni.get().removeCustomFilter(mName, filter);
+    }
+
+    @UiThread
+    public List<String> getCustomFilters() {
+        return Arrays.asList(FilteringConfigurationJni.get().getCustomFilters(mName));
+    }
+
+    private String sanitizeSite(String site) {
+        // |site| is raw user input. We expect it to be either a domain or a URL.
+        try {
+            URL candidate = new URL(URLUtil.guessUrl(site));
+            return candidate.getHost();
+        } catch (java.net.MalformedURLException e) {
+        }
+        // Could not parse |site| as URL or domain.
+        return null;
+    }
+
+    @CalledByNative
+    private void enabledStateChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onEnabledStateChanged();
+        }
+    }
+
+    @CalledByNative
+    private void filterListsChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onFilterListsChanged();
+        }
+    }
+
+    @CalledByNative
+    private void allowedDomainsChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onAllowedDomainsChanged();
+        }
+    }
+
+    @CalledByNative
+    private void customFiltersChanged() {
+        ThreadUtils.assertOnUiThread();
+        for (final ConfigurationChangeObserver observer : mConfigurationChangeObservers) {
+            observer.onCustomFiltersChanged();
+        }
+    }
+
+    @NativeMethods
+    interface Natives {
+        void bind(String configuration_name, FilteringConfiguration caller);
+        boolean isEnabled(String configuration_name);
+        void setEnabled(String configuration_name, boolean enabled);
+        void addFilterList(String configuration_name, String url);
+        void removeFilterList(String configuration_name, String url);
+        String[] getFilterLists(String configuration_name);
+        void addAllowedDomain(String configuration_name, String domain);
+        void removeAllowedDomain(String configuration_name, String domain);
+        String[] getAllowedDomains(String configuration_name);
+        void addCustomFilter(String configuration_name, String filter);
+        void removeCustomFilter(String configuration_name, String filter);
+        String[] getCustomFilters(String configuration_name);
+    }
+}
diff --git a/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/java/src/org/chromium/components/adblock/ResourceClassificationNotifier.java
@@ -0,0 +1,187 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import android.content.Context;
+import android.content.res.Resources;
+import android.util.Log;
+import android.webkit.URLUtil;
+
+import androidx.annotation.UiThread;
+
+import org.chromium.base.ContextUtils;
+import org.chromium.base.ThreadUtils;
+import org.chromium.base.annotations.CalledByNative;
+import org.chromium.base.annotations.NativeMethods;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * @brief Allows observing notifications from ongoing resource classification.
+ * Classification combines filters from all FilteringConfigurations.
+ * Lives on UI thread, not thread-safe.
+ */
+public final class ResourceClassificationNotifier {
+    private static final String TAG = ResourceClassificationNotifier.class.getSimpleName();
+
+    private static ResourceClassificationNotifier sInstance;
+    private final Set<AdBlockedObserver> mOnAdBlockedObservers = new HashSet<>();
+    // TODO(mpawlowski) in the future, we can consider adding filter hit
+    // notifications here as well (DPD-1233)
+
+    public interface AdBlockedObserver {
+        /**
+         * "Ad allowed" event for a request which would be blocked but there
+         * was an allowlisting filter found.
+         *
+         * It should not block the UI thread for too long.
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onAdAllowed(AdblockCounters.ResourceInfo info);
+
+        /**
+         * "Ad blocked" event for a request which was blocked.
+         *
+         * It should not block the UI thread for too long.
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onAdBlocked(AdblockCounters.ResourceInfo info);
+
+        /**
+         * "Page allowed" event for an allowlisted domain (page).
+         *
+         * It should not block the UI thread for too long.
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPageAllowed(AdblockCounters.ResourceInfo info);
+
+        /**
+         * "Popup allowed" event for a popup which would be blocked but there
+         * was an allowlisting filter found.
+         *
+         * It should not block the UI thread for too long.
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPopupAllowed(AdblockCounters.ResourceInfo info);
+
+        /**
+         * "Popup blocked" event for a popup which was blocked.
+         *
+         * It should not block the UI thread for too long.
+         * @param info contains auxiliary information about the resource.
+         */
+        @UiThread
+        void onPopupBlocked(AdblockCounters.ResourceInfo info);
+    }
+
+    private ResourceClassificationNotifier() {
+        ResourceClassificationNotifierJni.get().bind(this);
+    }
+
+    public static ResourceClassificationNotifier getInstance() {
+        ThreadUtils.assertOnUiThread();
+        if (sInstance == null) {
+            sInstance = new ResourceClassificationNotifier();
+        }
+        return sInstance;
+    }
+
+    @UiThread
+    public void addOnAdBlockedObserver(final AdBlockedObserver observer) {
+        mOnAdBlockedObservers.add(observer);
+    }
+
+    @UiThread
+    public void removeOnAdBlockedObserver(final AdBlockedObserver observer) {
+        mOnAdBlockedObservers.remove(observer);
+    }
+
+    @CalledByNative
+    private void adMatchedCallback(final String requestUrl, boolean wasBlocked,
+            final String[] parentFrameUrls, final String subscriptionUrl,
+            final String configurationName, final int contentType, final int tabId) {
+        ThreadUtils.assertOnUiThread();
+        final List<String> parentsList = Arrays.asList(parentFrameUrls);
+        final AdblockCounters.ResourceInfo resourceInfo = new AdblockCounters.ResourceInfo(
+                requestUrl, parentsList, subscriptionUrl, configurationName, contentType, tabId);
+        Log.d(TAG,
+                "eyeo: adMatchedCallback() notifies " + mOnAdBlockedObservers.size()
+                        + " listeners about " + resourceInfo.toString()
+                        + (wasBlocked ? " getting blocked" : " being allowed"));
+        for (final AdBlockedObserver observer : mOnAdBlockedObservers) {
+            if (wasBlocked) {
+                observer.onAdBlocked(resourceInfo);
+            } else {
+                observer.onAdAllowed(resourceInfo);
+            }
+        }
+    }
+
+    @CalledByNative
+    private void pageAllowedCallback(final String requestUrl, final String subscriptionUrl,
+            final String configurationName, final int tabId) {
+        ThreadUtils.assertOnUiThread();
+        final AdblockCounters.ResourceInfo resourceInfo =
+                new AdblockCounters.ResourceInfo(requestUrl, new ArrayList(), subscriptionUrl,
+                        configurationName, AdblockContentType.CONTENT_TYPE_OTHER.getValue(), tabId);
+        Log.d(TAG,
+                "eyeo: pageAllowedCallback() notifies " + mOnAdBlockedObservers.size()
+                        + " listeners about " + resourceInfo.toString());
+        for (final AdBlockedObserver observer : mOnAdBlockedObservers) {
+            observer.onPageAllowed(resourceInfo);
+        }
+    }
+
+    @CalledByNative
+    private void popupMatchedCallback(final String requestUrl, boolean wasBlocked,
+            final String openerUrl, final String subscription, final String configurationName,
+            final int tabId) {
+        ThreadUtils.assertOnUiThread();
+        final List<String> parentsList = Arrays.asList(openerUrl);
+        final AdblockCounters.ResourceInfo resourceInfo =
+                new AdblockCounters.ResourceInfo(requestUrl, parentsList, subscription,
+                        configurationName, AdblockContentType.CONTENT_TYPE_OTHER.getValue(), tabId);
+        Log.d(TAG,
+                "eyeo: popupMatchedCallback() notifies " + mOnAdBlockedObservers.size()
+                        + " listeners about " + resourceInfo.toString()
+                        + (wasBlocked ? " getting blocked" : " being allowed"));
+        for (final AdBlockedObserver observer : mOnAdBlockedObservers) {
+            if (wasBlocked) {
+                observer.onPopupBlocked(resourceInfo);
+            } else {
+                observer.onPopupAllowed(resourceInfo);
+            }
+        }
+    }
+
+    @NativeMethods
+    interface Natives {
+        void bind(ResourceClassificationNotifier caller);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/AdblockControllerTest.java
@@ -0,0 +1,87 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class AdblockControllerTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private CallbackHelper mHelper = new CallbackHelper();
+
+    @Before
+    public void setUp() {
+        mActivityTestRule.startMainActivityOnBlankPage();
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingAllowedDomains() throws TimeoutException {
+        final List<String> allowedDomains = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            AdblockController.getInstance().addAllowedDomain("foobar.com");
+            AdblockController.getInstance().addAllowedDomain("domain.com/path/to/page.html");
+            AdblockController.getInstance().addAllowedDomain("domain.com/duplicate.html");
+            AdblockController.getInstance().addAllowedDomain("https://scheme.com/path.html");
+            AdblockController.getInstance().addAllowedDomain("gibberish");
+            allowedDomains.addAll(AdblockController.getInstance().getAllowedDomains());
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a sorted collection of domains (not URLs) without duplicates.
+        ArrayList<String> expectedAllowedDomains = new ArrayList<String>();
+        expectedAllowedDomains.add("domain.com");
+        expectedAllowedDomains.add("foobar.com");
+        expectedAllowedDomains.add("scheme.com");
+        expectedAllowedDomains.add("www.gibberish.com");
+        Assert.assertEquals(expectedAllowedDomains, allowedDomains);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/FilteringConfigurationTest.java
@@ -0,0 +1,366 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.InstrumentationRegistry;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+import org.chromium.content_public.common.ContentSwitches;
+import org.chromium.net.test.EmbeddedTestServer;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+        ContentSwitches.HOST_RESOLVER_RULES + "=MAP * 127.0.0.1"})
+public class FilteringConfigurationTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private CallbackHelper mHelper = new CallbackHelper();
+    public FilteringConfiguration mConfigurationA;
+    public FilteringConfiguration mConfigurationB;
+    private EmbeddedTestServer mTestServer;
+    private String mTestUrl;
+
+    private class TestConfigurationChangeObserver
+            implements FilteringConfiguration.ConfigurationChangeObserver {
+        public volatile boolean mOnEnabledStateChangedCalled;
+        public volatile boolean mOnFilterListsChanged;
+        public volatile boolean mOnAllowedDomainsChanged;
+        public volatile boolean mOnCustomFiltersChanged;
+
+        public TestConfigurationChangeObserver() {
+            mOnEnabledStateChangedCalled = false;
+            mOnFilterListsChanged = false;
+            mOnAllowedDomainsChanged = false;
+            mOnCustomFiltersChanged = false;
+        }
+
+        @Override
+        public void onEnabledStateChanged() {
+            mOnEnabledStateChangedCalled = true;
+        }
+        @Override
+        public void onFilterListsChanged() {
+            mOnFilterListsChanged = true;
+        }
+
+        @Override
+        public void onAllowedDomainsChanged() {
+            mOnAllowedDomainsChanged = true;
+        }
+
+        @Override
+        public void onCustomFiltersChanged() {
+            mOnCustomFiltersChanged = true;
+        }
+    }
+
+    public void loadTestUrl() throws InterruptedException {
+        mActivityTestRule.loadUrl(mTestUrl, 5);
+    }
+
+    @Before
+    public void setUp() throws TimeoutException {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA = new FilteringConfiguration("a");
+            mConfigurationB = new FilteringConfiguration("b");
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        mActivityTestRule.startMainActivityOnBlankPage();
+        mTestServer = EmbeddedTestServer.createAndStartServer(InstrumentationRegistry.getContext());
+        mTestUrl = mTestServer.getURLWithHostName(
+                "test.org", "/chrome/test/data/adblock/innermost_frame.html");
+    }
+
+    @After
+    public void tearDown() {
+        mTestServer.stopAndDestroyServer();
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingAllowedDomains() throws Exception {
+        final List<String> allowedDomainsA = new ArrayList<>();
+        final List<String> allowedDomainsB = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addAllowedDomain("foobar.com");
+            mConfigurationA.addAllowedDomain("domain.com/path/to/page.html");
+            mConfigurationA.addAllowedDomain("domain.com/duplicate.html");
+            allowedDomainsA.addAll(mConfigurationA.getAllowedDomains());
+
+            mConfigurationB.addAllowedDomain("https://scheme.com/path.html");
+            mConfigurationB.addAllowedDomain("https://second.com");
+            mConfigurationB.removeAllowedDomain("https://second.com");
+            mConfigurationB.addAllowedDomain("gibberish");
+            allowedDomainsB.addAll(mConfigurationB.getAllowedDomains());
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a sorted collection of domains (not URLs) without duplicates.
+        ArrayList<String> expectedAllowedDomainsA = new ArrayList<String>();
+        expectedAllowedDomainsA.add("domain.com");
+        expectedAllowedDomainsA.add("foobar.com");
+        Assert.assertEquals(expectedAllowedDomainsA, allowedDomainsA);
+
+        // We expect not to see second.com because it was removed after being added.
+        ArrayList<String> expectedAllowedDomainsB = new ArrayList<String>();
+        expectedAllowedDomainsB.add("scheme.com");
+        expectedAllowedDomainsB.add("www.gibberish.com");
+        Assert.assertEquals(expectedAllowedDomainsB, allowedDomainsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingCustomFilters() throws Exception {
+        final List<String> customFiltersA = new ArrayList<>();
+        final List<String> customFiltersB = new ArrayList<>();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addCustomFilter("foobar.com");
+            mConfigurationA.addCustomFilter("foobar.com");
+            mConfigurationA.addCustomFilter("abc");
+            customFiltersA.addAll(mConfigurationA.getCustomFilters());
+
+            mConfigurationB.addCustomFilter("https://scheme.com/path.html");
+            mConfigurationB.addCustomFilter("https://second.com");
+            mConfigurationB.removeCustomFilter("https://second.com");
+            customFiltersB.addAll(mConfigurationB.getCustomFilters());
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        // We expect to see a collection of custom filters without duplicates.
+        // The order represents order of addition.
+        ArrayList<String> expectedCustomFiltersA = new ArrayList<String>();
+        expectedCustomFiltersA.add("foobar.com");
+        expectedCustomFiltersA.add("abc");
+        Assert.assertEquals(expectedCustomFiltersA, customFiltersA);
+
+        // We expect not to see https://second.com because it was removed after being added.
+        ArrayList<String> expectedCustomFiltersB = new ArrayList<String>();
+        expectedCustomFiltersB.add("https://scheme.com/path.html");
+        Assert.assertEquals(expectedCustomFiltersB, customFiltersB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void addingFilterLists() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final URL filterList2 = new URL("http://filters.com/list2.txt");
+        final List<URL> filterListsA = new ArrayList<URL>();
+        final List<URL> filterListsB = new ArrayList<URL>();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addFilterList(filterList1);
+            mConfigurationA.addFilterList(filterList2);
+            mConfigurationA.addFilterList(filterList1);
+            filterListsA.addAll(mConfigurationA.getFilterLists());
+
+            mConfigurationB.addFilterList(filterList1);
+            mConfigurationB.addFilterList(filterList2);
+            mConfigurationB.removeFilterList(filterList1);
+            filterListsB.addAll(mConfigurationB.getFilterLists());
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        ArrayList<URL> expectedFilterListsA = new ArrayList<URL>();
+        expectedFilterListsA.add(filterList1);
+        expectedFilterListsA.add(filterList2);
+        Assert.assertEquals(expectedFilterListsA, filterListsA);
+
+        ArrayList<URL> expectedFilterListsB = new ArrayList<URL>();
+        expectedFilterListsB.add(filterList2);
+        Assert.assertEquals(expectedFilterListsB, filterListsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void aliasedConfigurations() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final URL filterList2 = new URL("http://filters.com/list2.txt");
+        final List<URL> filterListsA = new ArrayList<URL>();
+        final List<URL> filterListsB = new ArrayList<URL>();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            // Create a new FilteringConfiguration with a name of one that
+            // already exist.
+            FilteringConfiguration aliasedConfiguration = new FilteringConfiguration("a");
+
+            // We add filter lists only to the original configuration instance.
+            mConfigurationA.addFilterList(filterList1);
+            mConfigurationA.addFilterList(filterList2);
+
+            // We check what filter lists are present in the original and in the aliased instance.
+            filterListsA.addAll(mConfigurationA.getFilterLists());
+            filterListsB.addAll(aliasedConfiguration.getFilterLists());
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        ArrayList<URL> expectedFilterLists = new ArrayList<URL>();
+        expectedFilterLists.add(filterList1);
+        expectedFilterLists.add(filterList2);
+        Assert.assertEquals(expectedFilterLists, filterListsA);
+        Assert.assertEquals(expectedFilterLists, filterListsB);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void configurationChangeObserverNotified() throws Exception {
+        final URL filterList1 = new URL("http://filters.com/list1.txt");
+        final TestConfigurationChangeObserver observer = new TestConfigurationChangeObserver();
+        Assert.assertFalse(observer.mOnEnabledStateChangedCalled);
+        Assert.assertFalse(observer.mOnAllowedDomainsChanged);
+        Assert.assertFalse(observer.mOnCustomFiltersChanged);
+        Assert.assertFalse(observer.mOnFilterListsChanged);
+
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            // We'll create an aliased instance which will receive notifications triggered by
+            // changes made to the original instance.
+            FilteringConfiguration aliasedConfiguration = new FilteringConfiguration("a");
+            aliasedConfiguration.addObserver(observer);
+
+            mConfigurationA.addFilterList(filterList1);
+            mConfigurationA.addAllowedDomain("test.com");
+            mConfigurationA.addCustomFilter("test.com");
+            mConfigurationA.setEnabled(false);
+
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        Assert.assertTrue(observer.mOnEnabledStateChangedCalled);
+        Assert.assertTrue(observer.mOnAllowedDomainsChanged);
+        Assert.assertTrue(observer.mOnCustomFiltersChanged);
+        Assert.assertTrue(observer.mOnFilterListsChanged);
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedByFilter() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addCustomFilter("resource.png");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceBlocked(mActivityTestRule, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceAllowedByFilter() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addCustomFilter("resource.png");
+            // Allowing filter for the mocked test.org domain that mTestServer hosts.
+            mConfigurationA.addCustomFilter("@@test.org$document");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mActivityTestRule, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceAllowedByAllowedDomain() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfigurationA.addCustomFilter("resource.png");
+            mConfigurationA.addAllowedDomain("test.org");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mActivityTestRule, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedBySecondConfiguration() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            // ConfigurationA allows the resource.
+            // Allowing rules take precedence within a FilteringConfiguration.
+            mConfigurationA.addCustomFilter("resource.png");
+            mConfigurationA.addAllowedDomain("test.org");
+            // But ConfigurationB blocks the resource.
+            // Blocking takes precedence across FilteringConfigurations.
+            mConfigurationB.addCustomFilter("resource.png");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        TestVerificationUtils.expectResourceBlocked(mActivityTestRule, "subresource");
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void noBlockingWithoutFilters() throws Exception {
+        loadTestUrl();
+        TestVerificationUtils.expectResourceShown(mActivityTestRule, "subresource");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/ResourceClassificationNotifierTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/ResourceClassificationNotifierTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/ResourceClassificationNotifierTest.java
@@ -0,0 +1,143 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.InstrumentationRegistry;
+import android.util.Log;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.base.test.util.IntegrationTest;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+import org.chromium.content_public.common.ContentSwitches;
+import org.chromium.net.test.EmbeddedTestServer;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE,
+        ContentSwitches.HOST_RESOLVER_RULES + "=MAP * 127.0.0.1"})
+public class ResourceClassificationNotifierTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private CallbackHelper mHelper = new CallbackHelper();
+    public FilteringConfiguration mConfiguration;
+    public TestAdBlockedObserver mAdBlockedObserver = new TestAdBlockedObserver();
+
+    private EmbeddedTestServer mTestServer;
+    private String mTestUrl;
+
+    public void loadTestUrl() throws InterruptedException {
+        mActivityTestRule.loadUrl(mTestUrl, 5);
+    }
+
+    @Before
+    public void setUp() throws TimeoutException {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfiguration = new FilteringConfiguration("a");
+            ResourceClassificationNotifier.getInstance().addOnAdBlockedObserver(mAdBlockedObserver);
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        mActivityTestRule.startMainActivityOnBlankPage();
+        mTestServer = EmbeddedTestServer.createAndStartServer(InstrumentationRegistry.getContext());
+        mTestUrl = mTestServer.getURLWithHostName(
+                "test.org", "/chrome/test/data/adblock/innermost_frame.html");
+    }
+
+    @After
+    public void tearDown() {
+        mTestServer.stopAndDestroyServer();
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void noNotificationWithoutBlocking() throws Exception {
+        loadTestUrl();
+
+        Assert.assertTrue(mAdBlockedObserver.blockedInfos.isEmpty());
+        Assert.assertTrue(mAdBlockedObserver.allowedInfos.isEmpty());
+        Assert.assertTrue(mAdBlockedObserver.allowedPageInfos.isEmpty());
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void resourceBlockedByFilter() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfiguration.addCustomFilter("resource.png");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        // Observer was notified about the blocking
+        Assert.assertTrue(mAdBlockedObserver.isBlocked("resource.png"));
+        Assert.assertTrue(mAdBlockedObserver.allowedInfos.isEmpty());
+        Assert.assertTrue(mAdBlockedObserver.allowedPageInfos.isEmpty());
+    }
+
+    @Test
+    @IntegrationTest
+    @LargeTest
+    @Feature({"adblock"})
+    public void pageAllowed() throws Exception {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            mConfiguration.addCustomFilter("resource.png");
+            mConfiguration.addAllowedDomain("test.org");
+            mHelper.notifyCalled();
+        });
+        mHelper.waitForCallback(0, 1, 10, TimeUnit.SECONDS);
+        loadTestUrl();
+        // Observer was notified about the allowed resource
+        Assert.assertTrue(mAdBlockedObserver.blockedInfos.isEmpty());
+        Assert.assertTrue(mAdBlockedObserver.isAllowed("resource.png"));
+
+        // TODO(mpawlowski): The observer could also be notified about the entire domain being
+        // allowed: Assert.assertTrue(mAdBlockedObserver.isPageAllowed("test.org")); However this is
+        // currently broken with multiple FilteringConfigurations (DPD-1729).
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestAdBlockedObserver.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestAdBlockedObserver.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestAdBlockedObserver.java
@@ -0,0 +1,183 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+import org.junit.Rule;
+
+import java.net.URL;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeoutException;
+
+public class TestAdBlockedObserver implements ResourceClassificationNotifier.AdBlockedObserver {
+    @Override
+    public void onAdAllowed(AdblockCounters.ResourceInfo info) {
+        allowedInfos.add(info);
+        Assert.assertTrue(info.getSubscription().equals(getExpectedSubscriptionUrl()));
+        CheckAndCountDownLatch(Decision.ALLOWED, info.getRequestUrl().split("\\?")[0]);
+    }
+
+    @Override
+    public void onAdBlocked(AdblockCounters.ResourceInfo info) {
+        blockedInfos.add(info);
+        Assert.assertTrue(info.getSubscription().equals(getExpectedSubscriptionUrl()));
+        CheckAndCountDownLatch(Decision.BLOCKED, info.getRequestUrl().split("\\?")[0]);
+    }
+
+    @Override
+    public void onPageAllowed(AdblockCounters.ResourceInfo info) {
+        allowedPageInfos.add(info);
+        Assert.assertTrue(info.getSubscription().equals(getExpectedSubscriptionUrl()));
+    }
+
+    @Override
+    public void onPopupAllowed(AdblockCounters.ResourceInfo info) {
+        allowedPopupsInfos.add(info);
+        Assert.assertTrue(info.getSubscription().equals(getExpectedSubscriptionUrl()));
+    }
+
+    @Override
+    public void onPopupBlocked(AdblockCounters.ResourceInfo info) {
+        blockedPopupsInfos.add(info);
+        Assert.assertTrue(info.getSubscription().equals(getExpectedSubscriptionUrl()));
+    }
+
+    public boolean isBlocked(String url) {
+        for (AdblockCounters.ResourceInfo info : blockedInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPopupBlocked(String url) {
+        for (AdblockCounters.ResourceInfo info : blockedPopupsInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public int numBlockedByType(AdblockContentType type) {
+        int result = 0;
+        for (AdblockCounters.ResourceInfo info : blockedInfos) {
+            if (info.getAdblockContentType() == type) ++result;
+        }
+        return result;
+    }
+
+    public int numBlockedPopups() {
+        int result = 0;
+        for (AdblockCounters.ResourceInfo info : blockedPopupsInfos) {
+            ++result;
+        }
+        return result;
+    }
+
+    public boolean isAllowed(String url) {
+        for (AdblockCounters.ResourceInfo info : allowedInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPageAllowed(String url) {
+        for (AdblockCounters.ResourceInfo info : allowedPageInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public boolean isPopupAllowed(String url) {
+        for (AdblockCounters.ResourceInfo info : allowedPopupsInfos) {
+            if (info.getRequestUrl().contains(url)) return true;
+        }
+
+        return false;
+    }
+
+    public int numAllowedByType(AdblockContentType type) {
+        int result = 0;
+        for (AdblockCounters.ResourceInfo info : allowedInfos) {
+            if (info.getAdblockContentType() == type) ++result;
+        }
+        return result;
+    }
+
+    public int numAllowedPopups() {
+        int result = 0;
+        for (AdblockCounters.ResourceInfo info : allowedPopupsInfos) {
+            ++result;
+        }
+        return result;
+    }
+
+    public void setExpectedSubscriptionUrl(URL url) {
+        mTestSubscriptionUrl = url;
+    }
+
+    private String getExpectedSubscriptionUrl() {
+        if (mTestSubscriptionUrl != null) return mTestSubscriptionUrl.toString();
+        return "adblock:custom";
+    }
+
+    private enum Decision { ALLOWED, BLOCKED }
+
+    // We either countDown() our latch for every filtered resource if there are no
+    // specific expectations set (expectedAllowed == null && expectedBlocked == null),
+    // or we countDown() only when all expectations have been met so when:
+    // (expectedAllowed.isNullOrEmpty() && expectedBlocked.isNullOrEmpty()).
+    private void CheckAndCountDownLatch(final Decision decision, final String url) {
+        if (countDownLatch != null) {
+            if (expectedBlocked == null && expectedAllowed == null) {
+                countDownLatch.countDown();
+            } else {
+                if (decision == Decision.BLOCKED) {
+                    if (expectedBlocked != null) {
+                        expectedBlocked.remove(url);
+                    }
+                } else {
+                    if (expectedAllowed != null) {
+                        expectedAllowed.remove(url);
+                    }
+                }
+                boolean expectationsMet = (expectedAllowed == null || expectedAllowed.isEmpty())
+                        && (expectedBlocked == null || expectedBlocked.isEmpty());
+                if (expectationsMet) {
+                    countDownLatch.countDown();
+                }
+            }
+        }
+    }
+
+    private URL mTestSubscriptionUrl;
+    List<AdblockCounters.ResourceInfo> blockedInfos = new CopyOnWriteArrayList<>();
+    List<AdblockCounters.ResourceInfo> allowedInfos = new CopyOnWriteArrayList<>();
+    List<AdblockCounters.ResourceInfo> allowedPageInfos = new CopyOnWriteArrayList<>();
+    List<AdblockCounters.ResourceInfo> blockedPopupsInfos = new CopyOnWriteArrayList<>();
+    List<AdblockCounters.ResourceInfo> allowedPopupsInfos = new CopyOnWriteArrayList<>();
+    CountDownLatch countDownLatch;
+    Set<String> expectedAllowed;
+    Set<String> expectedBlocked;
+};
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCircumventionTest.java
@@ -0,0 +1,90 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.DOMUtils;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.lang.Thread;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesCircumventionTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        mHelper.addFilterList(TestPagesTestsHelper.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyCircumventionInlineStyleNotImportant()
+            throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT
+                + "inline-style-important");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 2, "div");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyCircumventionAnonymousFrameDocumentWrite()
+            throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT
+                + "anoniframe-documentwrite");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[data-expectedresult='fail']");
+        String numHidden = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mHelper.getWebContents(),
+                "var hiddenCount = 0;"
+                        + "var elements = document.getElementById(\"write\").contentWindow.document.getElementsByTagName(\"span\");"
+                        + "for (let i = 0; i < elements.length; ++i) {"
+                        + "    if (window.getComputedStyle(elements[i]).display == \"none\") ++hiddenCount;"
+                        + "}"
+                        + "hiddenCount;");
+        Assert.assertEquals("1", numHidden);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesCspTest.java
@@ -0,0 +1,136 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.TestVerificationUtils.IncludeSubframes;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesCspTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspAllSites() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter("*$csp=script-src 'none'");
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_all");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "img[id='all-sites-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspSpecificSite() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("||%s^$csp=script-src https://%s/lib/utils.js",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_specific");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "img[id='specific-site-fail-1']", IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspSpecificSiteFrameSrc() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("||%s^$csp=frame-src 'self'", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "csp_specific");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div[id='sub-frame-error']", IncludeSubframes.NO);
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div[id='sub-frame-error-details']", IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspException() throws TimeoutException, InterruptedException {
+        // Blocking filter:
+        mHelper.addCustomFilter(String.format("||%s^$csp=script-src https://%s/lib/utils.js",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        // Resource loaded by JS was blocked
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div[id='unblock-javascript'] > img");
+
+        // Allowing filter:
+        mHelper.addCustomFilter(
+                String.format("@@||%s^$csp", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        // Resource loaded by JS was allowed
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[id='unblock-javascript'] > img");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testCspGenericBlockException() throws TimeoutException, InterruptedException {
+        // Blocking filter:
+        mHelper.addCustomFilter(String.format("||%s^$csp=script-src https://%s/lib/utils.js",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        // Resource loaded by JS was blocked
+        mHelper.loadUrl(
+                TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp_genericblock");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div[id='genericblock-javascript'] > img");
+
+        // Allowing filter:
+        mHelper.addCustomFilter(
+                String.format("@@||%s^$genericblock", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        // Resource loaded by JS was allowed
+        mHelper.loadUrl(
+                TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "csp_genericblock");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[id='genericblock-javascript'] > img");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuInvTest.java
@@ -0,0 +1,158 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesElemhideEmuInvTest {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String ELEMENT_HIDING_EMULATION_TESTPAGES_URL =
+            TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT
+            + "element-hiding-emulation-inversion";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpProperties() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#.ehei-properties:not(:-abp-properties(width: 238px))",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='basic-not-abp-properties-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpHas() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#.ehei-has:not(:-abp-has(span.ehei-has-not-hide))",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='basic-not-abp-has-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotAbpContains() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#.ehei-contains:not(span:-abp-contains(example-content))",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='basic-not-abp-contains-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotChained() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#.ehei-chained-parent:not(:-abp-has(> div:-abp-properties(width: 198px)))",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1,
+                "div[id='chained-extended-selectors-with-not-selector-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotCaseIsensitive() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#?#.ehei-case:not(:-abp-properties(WiDtH: 209px))",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1,
+                "div[id='case-insensitive-extended-selectors-with-not-selector-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotWildcard() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#?#.ehei-wildcard:not(:-abp-properties(cursor:*))",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1,
+                "div[id='wildcard-in-extended-selector-combined-with-not-selector-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotRegexAbpProperties()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#.ehei-regex:not(:-abp-properties(/width: 11[1-5]px;/))",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-not-abp-properties-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-not-abp-properties-fail-2']");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1, ".ehei-regex3");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuNotRegexAbpContains() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#.ehei-contains-regex:not(span:-abp-contains(/example-contentregex\\d/))",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='regular-expression-in-not-abp-contains-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='regular-expression-in-not-abp-contains-fail-2']");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 2, ".ehei-contains-regex");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideEmuTest.java
@@ -0,0 +1,217 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesElemhideEmuTest {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String ELEMENT_HIDING_EMULATION_TESTPAGES_URL =
+            TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "element-hiding-emulation";
+    public static final String ELEMENT_HIDING_EMULATION_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "element-hiding";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpProperties()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#div:-abp-properties(width: 213px)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='basic-abp-properties-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpHas() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#div:-abp-has(>div>span.ehe-abp-has)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='basic-abp-has-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicHas() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#div:has(>div>span.ehe-has)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        // "Basic :has() usage" are duplicated on testpage.
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "div[id='basic-has-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicAbpContains()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#?#span:-abp-contains(ehe-contains-target)",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='basic-abp-contains-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicXpath() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#span:xpath(//*[@id=\"basic-xpath-usage-fail\"])",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='basic-xpath-usage-fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersBasicHasText() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#span:has-text(ehe-has-text)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "span[id='basic-has-text-usage-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersChainedExtendedSelectors()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#div:-abp-has(> div:-abp-properties(width: 214px))",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='chained-extended-selectors-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersCaseInsensitiveExtendedSelectors()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#div:-abp-properties(WiDtH: 215px)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='case-insensitive-extended-selectors-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersWildcardInExtendedSelector()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#?#div:-abp-properties(cursor:*)", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='wildcard-in-extended-selector-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersRegularExpressionInAbpProperties()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#?#div:-abp-properties(/width: 12[1-5]px;/)",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-abp-properties-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-abp-properties-fail-2']");
+        // "Not a target" div is not hidden, does not match regular expression.
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[class='testcase-examplecontent ehe-regex3']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersRegularExpressionInAbpContains()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#?#div > div:-abp-contains(/ehe-containsregex\\d/)",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-abp-contains-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='regular-expression-in-abp-contains-fail-2']");
+    }
+
+    // Exceptions:
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideEmuFiltersException() throws TimeoutException, InterruptedException {
+        // Add a blocking filter, verify element hidden.
+        mHelper.addCustomFilter(
+                String.format("%s##.testcase-ehe", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='exception-usage-pass-1']");
+
+        // Add exception filter, verify element no longer hidden.
+        mHelper.addCustomFilter(
+                String.format("%s#@#.testcase-ehe", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EMULATION_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[id='exception-usage-pass-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesElemhideTest.java
@@ -0,0 +1,237 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesElemhideTest {
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String ELEMENT_HIDING_TESTPAGES_URL =
+            TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "element-hiding";
+    public static final String ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "elemhide";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIdSelector() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s###eh-id", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[id='eh-id']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIdSelectorDoubleCurlyBraces()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s##div[id='{{eh-id}}']", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[id='{{eh-id}}']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersClassSelector() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s##.eh-class", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[class='eh-class']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersDescendantSelector()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##.testcase-area > .eh-descendant", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[class='eh-descendant']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersSiblingSelector() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s##.testcase-examplecontent + .eh-sibling",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[class='eh-sibling']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector1()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##div[height=\"100\"][width=\"100\"]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='attribute-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector2()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s##div[href=\"http://testcase-attribute.com/\"]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='attribute-selector-2-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersAttributeSelector3()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##div[style=\"width: 200px;\"]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='attribute-selector-3-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersStartsWithSelector1()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s##div[href^=\"http://testcase-startswith.com/\"]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='starts-with-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersStartsWithSelector2()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##div[style^=\"width: 201px;\"]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='starts-with-selector-2-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersEndsWithSelector1()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##div[style$=\"width: 202px;\"]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='ends-with-selector-1-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersContains() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s##div[style*=\"width: 203px;\"]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[id='contains-fail-1']");
+    }
+
+    // Exceptions:
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersBasicException() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s##.ex-elemhide", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/elemhide/basic/*", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        // No exceptions added yet, both objects should be blocked.
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "img[id='basic-usage-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[id='basic-usage-pass-1']");
+        // Add exception filter and reload.
+        mHelper.addCustomFilter(String.format(
+                "@@%s/en/exceptions/elemhide$elemhide", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        // Image should remain blocked, div should be unblocked.
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "img[id='basic-usage-fail-1']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[id='basic-usage-area'] > div[id='basic-usage-pass-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testElemHideFiltersIframeException() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s##.targ-elemhide", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/elemhide/iframe/*.png", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "img[id='iframe-fail-1']");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div[id='iframe-pass-1']");
+
+        // Add exception filter and reload.
+        mHelper.addCustomFilter(String.format(
+                "@@%s/en/exceptions/elemhide$elemhide", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(ELEMENT_HIDING_EXCEPTIONS_TESTPAGES_URL);
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "img[id='iframe-fail-1']");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1, "div[id='iframe-pass-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesExceptionTest.java
@@ -0,0 +1,244 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.task.PostTask;
+import org.chromium.base.task.TaskTraits;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.DOMUtils;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+import org.chromium.content_public.common.ContentSwitches;
+
+import java.lang.Thread;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesExceptionTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        mHelper.addFilterList(TestPagesTestsHelper.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyImageExceptions() throws TimeoutException, InterruptedException {
+        final String subdomainImage = String.format(
+                "https://allowed.subdomain.%s/testfiles/image_exception/subdomain.png",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN);
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "image");
+        Assert.assertEquals(2, mHelper.numAllowed());
+        Assert.assertEquals(2, mHelper.numAllowedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isAllowed(subdomainImage));
+        Assert.assertTrue(mHelper.isAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "image_exception/image.png"));
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 2, "img");
+        String numImages = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mHelper.getWebContents(), "document.getElementsByTagName(\"img\").length;");
+        Assert.assertEquals("2", numImages);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @CommandLineFlags.Add(ContentSwitches.DISABLE_POPUP_BLOCKING)
+    public void testVerifyPopupException() throws TimeoutException, InterruptedException {
+        final String POPUP_TESTACE_URL =
+                TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "popup";
+        mHelper.loadUrl(POPUP_TESTACE_URL);
+        Assert.assertEquals(1, mHelper.getTabCount());
+        final CallbackHelper tabsLoadedWaiter = mHelper.getTabsOpenedAndLoadedWaiter();
+        PostTask.postTask(TaskTraits.BEST_EFFORT_MAY_BLOCK, () -> {
+            try {
+                String numElements = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(),
+                        "var elements = document.getElementsByClassName(\"testcase-trigger\");"
+                                + "for (let i = 0; i < elements.length; ++i) {"
+                                + "    elements[i].click();"
+                                + "}"
+                                + "elements.length;");
+                Assert.assertEquals("3", numElements);
+            } catch (TimeoutException e) {
+                Assert.assertEquals("Popups were triggered", "Popups were NOT triggered");
+            }
+        });
+        // Wait for three tab loaded events
+        tabsLoadedWaiter.waitForCallback(
+                0, 3, TestPagesTestsHelper.TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        Assert.assertEquals(4, mHelper.getTabCount());
+        Assert.assertEquals(3, mHelper.numAllowedPopups());
+        Assert.assertTrue(mHelper.isPopupAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "popup_exception/link.html"));
+        Assert.assertTrue(mHelper.isPopupAllowed(TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                + "popup_exception/script-window.html"));
+        Assert.assertTrue(mHelper.isPopupAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "popup_exception/script-tab.html"));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySubdocumentException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "subdocument");
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                + "subdocument_exception/subdocument.html"));
+        TestVerificationUtils.verifyGreenBackground(mActivityTestRule, "exception-target");
+        String numFrames = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mHelper.getWebContents(), "window.frames.length;");
+        Assert.assertEquals("1", numFrames);
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1, "iframe");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyScriptException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "script");
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "script_exception/script.js"));
+        TestVerificationUtils.verifyGreenBackground(mActivityTestRule, "script-target");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "script_exception/image.png"));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyStylesheetException() throws TimeoutException, InterruptedException {
+        final String allowedUrl = TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                + "stylesheet_exception/stylesheet.cs";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(Arrays.asList(allowedUrl)));
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "stylesheet");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(allowedUrl));
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "stylesheet_exception/image.png"));
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "img");
+        TestVerificationUtils.verifyGreenBackground(mActivityTestRule, "exception-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyXHRException() throws TimeoutException, InterruptedException {
+        final String allowedUrl =
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "xmlhttprequest_exception/text.txt";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(Arrays.asList(allowedUrl)));
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "xmlhttprequest");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(allowedUrl));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyGenericBlockException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "genericblock");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "genericblock/specific.png"));
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "img[data-expectedresult='pass']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyGenericHideException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "generichide");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[data-expectedresult='pass']");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyDocumentException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "document");
+        Assert.assertTrue(mHelper.isAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "document/image.png"));
+        Assert.assertTrue(mHelper.isPageAllowed(
+                TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "document"));
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyWebSocketException() throws TimeoutException, InterruptedException {
+        final String wssUrl =
+                String.format("wss://%s/websocket", TestPagesTestsHelper.TESTPAGES_DOMAIN);
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(null, new HashSet<>(Arrays.asList(wssUrl)));
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "websocket");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowedByType(AdblockContentType.CONTENT_TYPE_WEBSOCKET));
+        Assert.assertTrue(mHelper.isAllowed(wssUrl));
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesFilterTest.java
@@ -0,0 +1,329 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.task.PostTask;
+import org.chromium.base.task.TaskTraits;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.TestVerificationUtils.IncludeSubframes;
+import org.chromium.content_public.browser.test.util.DOMUtils;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+import org.chromium.content_public.common.ContentSwitches;
+
+import java.lang.Thread;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesFilterTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        mHelper.addFilterList(TestPagesTestsHelper.TESTPAGES_SUBSCRIPTION);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testBlockingFilters() throws TimeoutException, InterruptedException {
+        final CountDownLatch countDownLatch = mHelper.setOnAdMatchedExpectations(
+                new HashSet<>(Arrays.asList(
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "blocking/full-path.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                                + "blocking/partial-path/partial-path.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                                + "blocking/wildcard/1/wildcard.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                                + "blocking/wildcard/2/wildcard.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "blocking/dynamic.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "blocking/subdomain.png")),
+                null);
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "blocking");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(6, mHelper.numBlocked());
+        Assert.assertEquals(6, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 6, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyScriptFilters() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "script");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "script/script.js"));
+
+        String childCount =
+                JavaScriptUtils.executeJavaScriptAndWaitForResult(mHelper.getWebContents(),
+                        "document.getElementById(\"script-target\").childElementCount");
+        Assert.assertEquals("1", childCount);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyImageFilters() throws TimeoutException, InterruptedException {
+        final CountDownLatch countDownLatch = mHelper.setOnAdMatchedExpectations(
+                new HashSet<>(Arrays.asList(
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "image/static/static.png",
+                        TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT
+                                + "image/dynamic/dynamic.png")),
+                null);
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "image");
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "image/static/static.png"));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "image/dynamic/dynamic.png"));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyStylesheetFilters() throws TimeoutException, InterruptedException {
+        final String blockedUrl =
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "stylesheet/stylesheet.cs";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(Arrays.asList(blockedUrl)), null);
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "stylesheet");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(
+                1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_STYLESHEET));
+        Assert.assertTrue(mHelper.isBlocked(blockedUrl));
+        String value = DOMUtils.getNodeContents(mHelper.getWebContents(), "stylesheet-target");
+        Assert.assertEquals("Passed. Stylesheet was blocked.", value);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @CommandLineFlags.Add(ContentSwitches.DISABLE_POPUP_BLOCKING)
+    public void testVerifyPopupFilters() throws TimeoutException, InterruptedException {
+        final String POPUP_TESTACE_URL =
+                TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "popup";
+        mHelper.loadUrl(POPUP_TESTACE_URL);
+        Assert.assertEquals(1, mHelper.getTabCount());
+        final CallbackHelper tabsOpenedAndClosedWaiter = mHelper.getTabsOpenedAndClosedWaiter();
+        // Trigger popups which open and close when blocked
+        PostTask.postTask(TaskTraits.BEST_EFFORT_MAY_BLOCK, () -> {
+            try {
+                String numElements = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                        mHelper.getWebContents(),
+                        "var elements = document.getElementsByClassName(\"testcase-trigger\");"
+                                + "for (let i = 0; i < elements.length; ++i) {"
+                                + "    elements[i].click();"
+                                + "}"
+                                + "elements.length;");
+                Assert.assertEquals("3", numElements);
+            } catch (TimeoutException e) {
+                Assert.assertEquals("Popups were triggered", "Popups were NOT triggered");
+            }
+        });
+        // Wait for three tab open events and three close tabs events
+        tabsOpenedAndClosedWaiter.waitForCallback(
+                0, 6, TestPagesTestsHelper.TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        Assert.assertEquals(3, mHelper.numBlockedPopups());
+        Assert.assertTrue(mHelper.isPopupBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "popup/link.html"));
+        Assert.assertTrue(mHelper.isPopupBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "popup/script-window.html"));
+        Assert.assertTrue(mHelper.isPopupBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "popup/script-tab.html"));
+        Assert.assertEquals(1, mHelper.getTabCount());
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyXHRFilters() throws TimeoutException, InterruptedException {
+        final String blockedUrl =
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "xmlhttprequest/text.txt";
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(Arrays.asList(blockedUrl)), null);
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "xmlhttprequest");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(
+                1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_XMLHTTPREQUEST));
+        Assert.assertTrue(mHelper.isBlocked(blockedUrl));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySubdocumentFilters() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "subdocument");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(
+                1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_SUBDOCUMENT));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "subdocument/subdocument.html"));
+        // Do not search for iframe within the site's iframes.
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "iframe[data-expectedresult='fail']", IncludeSubframes.NO);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    @DisabledTest(message = "Please enable again when rewrite filters will be supported")
+    public void testVerifyRewrite() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "rewrite");
+        Assert.assertEquals(3, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertEquals(2, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_MEDIA));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "rewrite/audio.mp3"));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "rewrite/video.mp4"));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "rewrite/script.js"));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyMatchCaseFilter() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "match-case");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyThirdPartyFilter() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "third-party");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "img[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 2, "img[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyOtherFilter() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "other");
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_OTHER));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "other/image.png"));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyDomainFilter() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "domain");
+        Assert.assertEquals(2, mHelper.numBlocked());
+        Assert.assertEquals(2, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "domain/static/target/image.png"));
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "domain/dynamic/image.png"));
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "img[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyPingFilter() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "ping");
+        // Ping action not yet triggered
+        Assert.assertEquals(0, mHelper.numBlocked());
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
+        mHelper.setOnAdMatchedLatch(countDownLatch);
+        // Trigger ping action
+        final Tab tab =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get().getCurrentTab();
+        JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                tab.getWebContents(), "document.getElementById(\"script-ping-trigger\").click()");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlocked());
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyPingFilterException() throws TimeoutException, InterruptedException {
+        mHelper.loadUrl(TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "ping");
+        // Ping action not yet triggered
+        Assert.assertEquals(0, mHelper.numAllowed());
+        final CountDownLatch countDownLatch = new CountDownLatch(1);
+        mHelper.setOnAdMatchedLatch(countDownLatch);
+        // Trigger ping action
+        final Tab tab =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get().getCurrentTab();
+        JavaScriptUtils.executeJavaScriptAndWaitForResult(tab.getWebContents(),
+                "document.getElementsByClassName(\"testcase-trigger\")[0].click()");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertEquals(0, mHelper.numBlocked());
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesHeaderFilterTest.java
@@ -0,0 +1,150 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.components.adblock.TestVerificationUtils.IncludeSubframes;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesHeaderFilterTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String HEADER_TESTPAGES_URL =
+            TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "header";
+    public static final String HEADER_EXCEPTIONS_TESTPAGES_URL =
+            TestPagesTestsHelper.EXCEPTION_TESTPAGES_TESTCASES_ROOT + "header";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterScript() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("||%s/testfiles/header/$header=content-type=application/javascript",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_SCRIPT));
+        Assert.assertTrue(mHelper.isBlocked(String.format(
+                "https://%s/testfiles/header/script.js", TestPagesTestsHelper.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0,
+                "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterImage() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("||%s/testfiles/header/image.png$header=content-type=image/png",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isBlocked(String.format(
+                "https://%s/testfiles/header/image.png", TestPagesTestsHelper.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0, "img[id='image-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterImageAndComma() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("||%s/testfiles/header/image2.png$header=date=\\x2c",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(mHelper.isBlocked(String.format(
+                "https://%s/testfiles/header/image2.png", TestPagesTestsHelper.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0, "img[id='comma-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterStylesheet() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("||%s/testfiles/header/$header=content-type=text/css",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(
+                1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_STYLESHEET));
+        Assert.assertTrue(
+                mHelper.isBlocked(String.format("https://%s/testfiles/header/stylesheet.css",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN)));
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHeaderFilterException() throws TimeoutException, InterruptedException {
+        // Add blocking filter, expect blocked image
+        mHelper.addCustomFilter(
+                String.format("||%s/testfiles/header_exception/$header=content-type=image/png",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_EXCEPTIONS_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "img[id='image-header-exception-pass-1']");
+
+        // Add exception filter, expect image allowed
+        mHelper.addCustomFilter(String.format(
+                "@@%s/testfiles/header_exception/$header", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(HEADER_EXCEPTIONS_TESTPAGES_URL);
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertEquals(1, mHelper.numAllowedByType(AdblockContentType.CONTENT_TYPE_IMAGE));
+        Assert.assertTrue(
+                mHelper.isAllowed(String.format("https://%s/testfiles/header_exception/image.png",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN)));
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "img[id='image-header-exception-pass-1']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesRewriteTest.java
@@ -0,0 +1,185 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesRewriteTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String REWRITE_TEST_URL =
+            TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "rewrite";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteScript() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.js$rewrite=abp-resource:blank-js,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0, "div[id='script-fail-1']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteStylesheet() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.css$rewrite=abp-resource:blank-css,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifyGreenBackground(mActivityTestRule, "stylesheet-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteSubdocument() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.html$rewrite=abp-resource:blank-html,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "subdocument-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteText() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.txt$rewrite=abp-resource:blank-text,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "text-status");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteGif() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/1x1.gif$rewrite=abp-resource:1x1-transparent-gif,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "1x1-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite2x2Png() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/2x2.png$rewrite=abp-resource:2x2-transparent-png,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "2x2-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite3x2Png() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/3x2.png$rewrite=abp-resource:3x2-transparent-png,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "3x2-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewrite32x32Png() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/32x32.png$rewrite=abp-resource:32x32-transparent-png,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        TestVerificationUtils.verifySelfTestPass(mActivityTestRule, "32x32-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteAudio() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.mp3$rewrite=abp-resource:blank-mp3,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        String value = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mActivityTestRule.getActivity()
+                        .getTabModelSelectorSupplier()
+                        .get()
+                        .getCurrentTab()
+                        .getWebContents(),
+                "document.getElementById('audio-area').lastChild.getAttribute('data-expectedresult')");
+        Assert.assertEquals("\"pass\"", value);
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testRewriteVideo() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/rewrite/*.mp4$rewrite=abp-resource:blank-mp4,domain=%s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrl(REWRITE_TEST_URL);
+        String value = JavaScriptUtils.executeJavaScriptAndWaitForResult(
+                mActivityTestRule.getActivity()
+                        .getTabModelSelectorSupplier()
+                        .get()
+                        .getCurrentTab()
+                        .getWebContents(),
+                "document.getElementById('video-area').lastChild.getAttribute('data-expectedresult')");
+        Assert.assertEquals("\"pass\"", value);
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSiteKeyTest.java
@@ -0,0 +1,82 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesSiteKeyTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifySitekeyException() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#@#[data-adblockkey]", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(
+                String.format("%s##.testcase-sitekey-eh", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/sitekey/outofframe.png", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(String.format(
+                "||%s/testfiles/sitekey/inframe.png", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.addCustomFilter(
+                "@@$document,sitekey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBANGtTstne7e8MbmDHDiMFkGbcuBgXmiVesGOG3gtYeM1EkrzVhBjGUvKXYE4GLFwqty3v5MuWWbvItUWBTYoVVsCAwEAAQ");
+        mHelper.loadUrl(TestPagesTestsHelper.SITEKEY_TESTPAGES_TESTCASES_ROOT);
+        Assert.assertEquals(1, mHelper.numBlocked());
+        Assert.assertTrue(mHelper.isBlocked(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "sitekey/outofframe.png"));
+        Assert.assertEquals(1, mHelper.numAllowed());
+        Assert.assertTrue(mHelper.isAllowed(
+                TestPagesTestsHelper.TESTPAGES_RESOURCES_ROOT + "sitekey/inframe.png"));
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "img");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "div");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesSnippetsTest.java
@@ -0,0 +1,545 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.DisabledTest;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesSnippetsTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    public static final String SNIPPETS_TESTPAGES_TESTCASES_ROOT =
+            TestPagesTestsHelper.TESTPAGES_TESTCASES_ROOT + "snippets/";
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptBasic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-current-inline-script console.group",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-current-inline-script");
+        // All "Abort" snippets cancel creation of the target div, so it won't be hidden - it will
+        // not exist in DOM. Therefore we verify it's not displayed instead of verifying it's
+        // hidden.
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptSearch() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#abort-current-inline-script console.info acis-search",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-current-inline-script");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#search-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortCurrentInlineScriptRegex() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#abort-current-inline-script console.warn '/acis-regex[1-2]/'",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-current-inline-script");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#regex-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadBasic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#abort-on-property-read aoprb", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadSubProperty() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#abort-on-property-read aopr.sp", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyReadFunctionProperty()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#abort-on-property-read aoprf.fp", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-read");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0,
+                "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteBasic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-property-write window.aopwb",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteSubProperty()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-property-write window.aopwsp",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnPropertyWriteFunctionProperty()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#abort-on-property-write aopwf.fp", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-property-write");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0,
+                "div#functionproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadBasic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-read aoiprb",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadSubProperty()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-read aoipr.sp",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyReadMultipleProperties()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-read aoipr1 aoipr2",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-read");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0,
+                "div#multipleproperties-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteBasic()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-write aoipwb",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteSubProperty()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-write aoipw.sp",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#subproperty-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testAbortOnIframePropertyWriteMultipleProperties()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#abort-on-iframe-property-write aoipw1 aoipw2",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "abort-on-iframe-property-write");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 0,
+                "div#multipleproperties-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsStatic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-contains 'hic-basic-static' p[id]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "p#hic-static-id");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsDynamic() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-contains 'hic-basic-dynamic' p[id]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "p#hic-dynamic-id");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsSearch() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-contains 'hic-search' p[id] .target",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#search2-target > p.target");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#search1-target > p[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsRegex() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-contains /hic-regex-[2-3]/ p[id]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        // "hic-regex-1" does not match regex, should remain displayed.
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1, "p#hic-regex-1");
+
+        // "hic-regex-2" and "hic-regex-2" do match regex, should be hidden.
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "p#hic-regex-2");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "p#hic-regex-3");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsFrame() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-contains hidden span#frame-target",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1, "span#frame-target");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsAndMatchesStyleStatic()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-contains-and-matches-style hicamss div[id] span.label /./ 'display: inline;'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#static-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#static-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsAndMatchesStyleDynamic()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-contains-and-matches-style hicamsd div[id] span.label /./ 'display: inline;'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#dynamic-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#dynamic-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsImage() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-contains-image /^89504e470d0a1a0a0000000d4948445200000064000000640802/ div[shouldhide] div",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-image");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsVisibleTextBasicUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-contains-visible-text Sponsored-hicvt-basic '#parent-basic > .article' '#parent-basic > .article .label'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-visible-text");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#parent-basic > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfContainsVisibleTextContentUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-contains-visible-text Sponsored-hicvt-content '#parent-content > .article' '#parent-content > .article .label'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-contains-visible-text");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#parent-content > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfHasAndMatchesStyleBasicUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-has-and-matches-style a[href=\"#basic-target-ad\"] div[id] span.label /./ 'display: inline;'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-has-and-matches-style");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfHasAndMatchesStyleLegitElements()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-has-and-matches-style a[href=\"#comments-target-ad\"] div[id] span.label ';' /\\\\bdisplay:\\ inline\\;/",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-has-and-matches-style");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#comments-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfLabeledBy() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format(
+                "%s#$#hide-if-labelled-by 'Label' '#hilb-target [aria-labelledby]' '#hilb-target'",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-labelled-by");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathBasicStaticUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-matches-xpath //*[@id=\"isnfnv\"]",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1,
+                "div#basic-static-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1,
+                "div#basic-static-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathClassUsage() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#hide-if-matches-xpath //*[@class=\"to-be-hidden\"]",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#class-usage-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#class-usage-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfMatchesXPathIdStartsWith() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#hide-if-matches-xpath //div[starts-with(@id,\"fail\")]",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-matches-xpath");
+        TestVerificationUtils.verifyHiddenCount(mActivityTestRule, 1,
+                "div#hide-if-id-starts-with-area > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(mActivityTestRule, 1,
+                "div#hide-if-id-starts-with-area > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfShadowContainsBasicUsage() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#hide-if-shadow-contains 'hisc-basic' p",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-shadow-contains");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#basic-target > p[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testHideIfShadowContainsRegexUsage() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#hide-if-shadow-contains '/hisc-regex[1-2]/' div",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "hide-if-shadow-contains");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 2, "div#regex-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#regex-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testJsonPrune() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#json-prune 'data-expectedresult jsonprune aria-label'",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "json-prune?delay=100");
+        // The object does not get hidden, it no longer exists in the DOM.
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#testcase-area > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testOverridePropertyRead() throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#override-property-read overridePropertyRead.fp false",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(SNIPPETS_TESTPAGES_TESTCASES_ROOT + "override-property-read");
+        TestVerificationUtils.verifyHiddenCount(
+                mActivityTestRule, 1, "div#basic-target > div[data-expectedresult='fail']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testStripFetchQueryParameterBasicUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(String.format("%s#$#strip-fetch-query-parameter basicBlocked %s",
+                TestPagesTestsHelper.TESTPAGES_DOMAIN, TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "strip-fetch-query-parameter");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 0, "div#basic-target > div[data-expectedresult='fail']");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 1, "div#basic-target > div[data-expectedresult='pass']");
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testStripFetchQueryParameterOtherUsage()
+            throws TimeoutException, InterruptedException {
+        mHelper.addCustomFilter(
+                String.format("%s#$#strip-fetch-query-parameter otherAllowed2 other-domain",
+                        TestPagesTestsHelper.TESTPAGES_DOMAIN));
+        mHelper.loadUrlWaitForContent(
+                SNIPPETS_TESTPAGES_TESTCASES_ROOT + "strip-fetch-query-parameter");
+        TestVerificationUtils.verifyDisplayedCount(
+                mActivityTestRule, 2, "div#other-target > div[data-expectedresult='pass']");
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesTestsHelper.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesTestsHelper.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesTestsHelper.java
@@ -0,0 +1,255 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+import org.junit.Rule;
+
+import org.chromium.base.Log;
+import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.chrome.browser.tab.EmptyTabObserver;
+import org.chromium.chrome.browser.tab.Tab;
+import org.chromium.chrome.browser.tabmodel.TabModelObserver;
+import org.chromium.chrome.browser.tabmodel.TabModelSelector;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.WebContents;
+import org.chromium.content_public.browser.test.util.TestThreadUtils;
+import org.chromium.url.GURL;
+
+import java.lang.Thread;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+public class TestPagesTestsHelper {
+    public static final String TESTPAGES_DOMAIN = "abptestpages.org";
+    public static final String TESTPAGES_BASE_URL = "https://" + TESTPAGES_DOMAIN;
+    public static final String TESTPAGES_TESTCASES_ROOT = TESTPAGES_BASE_URL + "/en/";
+    public static final String FILTER_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "filters/";
+    public static final String EXCEPTION_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "exceptions/";
+    public static final String CIRCUMVENTION_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "circumvention/";
+    public static final String SITEKEY_TESTPAGES_TESTCASES_ROOT =
+            EXCEPTION_TESTPAGES_TESTCASES_ROOT + "sitekey";
+    public static final String SNIPPETS_TESTPAGES_TESTCASES_ROOT =
+            TESTPAGES_TESTCASES_ROOT + "snippets/";
+    public static final String TESTPAGES_RESOURCES_ROOT = TESTPAGES_BASE_URL + "/testfiles/";
+    public static final String TESTPAGES_SUBSCRIPTION =
+            TESTPAGES_TESTCASES_ROOT + "/abp-testcase-subscription.txt";
+
+    public static final int TEST_TIMEOUT_SEC = 30;
+
+    private URL mTestSubscriptionUrl;
+    private CallbackHelper mHelper = new CallbackHelper();
+    private TestAdBlockedObserver mObserver = new TestAdBlockedObserver();
+    private TestSubscriptionUpdatedObserver mSubscriptionUpdateObserver =
+            new TestSubscriptionUpdatedObserver();
+    private ChromeTabbedActivityTestRule mActivityTestRule;
+
+    private class TestSubscriptionUpdatedObserver
+            implements AdblockController.SubscriptionUpdateObserver {
+        @Override
+        public void onSubscriptionDownloaded(final URL url) {
+            if (mTestSubscriptionUrl == null) return;
+            if (url.toString().contains(mTestSubscriptionUrl.toString())) {
+                Log.d("TestSubscriptionUpdatedObserver",
+                        "Notify subscription updated: " + url.toString());
+                mHelper.notifyCalled();
+            }
+        }
+    }
+
+    public void setUp(final ChromeTabbedActivityTestRule activityRule) {
+        mActivityTestRule = activityRule;
+        mActivityTestRule.startMainActivityOnBlankPage();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            AdblockController.getInstance().addOnAdBlockedObserver(mObserver);
+            AdblockController.getInstance().addSubscriptionUpdateObserver(
+                    mSubscriptionUpdateObserver);
+        });
+    }
+
+    public void addFilterList(final String filterListUrl) {
+        try {
+            mTestSubscriptionUrl = new URL(filterListUrl);
+            mObserver.setExpectedSubscriptionUrl(mTestSubscriptionUrl);
+        } catch (MalformedURLException e) {
+        }
+        Assert.assertNotNull("Test subscription url", mTestSubscriptionUrl);
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            AdblockController.getInstance().installSubscription(mTestSubscriptionUrl);
+        });
+        try {
+            mHelper.waitForCallback(0, 1, TEST_TIMEOUT_SEC, TimeUnit.SECONDS);
+        } catch (TimeoutException e) {
+            Assert.assertEquals(
+                    "Test subscription was properly added", "Failed to add test subscription");
+        }
+    }
+
+    public void addCustomFilter(final String filter) {
+        TestThreadUtils.runOnUiThreadBlocking(
+                () -> { AdblockController.getInstance().addCustomFilter(filter); });
+    }
+
+    public void tearDown() {
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            AdblockController.getInstance().removeSubscriptionUpdateObserver(
+                    mSubscriptionUpdateObserver);
+            AdblockController.getInstance().removeOnAdBlockedObserver(mObserver);
+        });
+    }
+
+    public CallbackHelper getTabsOpenedAndClosedWaiter() {
+        final CallbackHelper callbackHelper = new CallbackHelper();
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            tabModelSelector.getCurrentModel().addObserver(new TabModelObserver() {
+                @Override
+                public void onFinishingTabClosure(Tab tab) {
+                    // For some reason TabModelObserver#tabRemoved() is not called.
+                    // Let's wait a bit to make sure tab is indeed closed.
+                    try {
+                        Thread.sleep(100);
+                    } catch (InterruptedException e) {
+                    }
+                    callbackHelper.notifyCalled();
+                }
+                @Override
+                public void didAddTab(
+                        Tab tab, int type, int creationState, boolean markedForSelection) {
+                    callbackHelper.notifyCalled();
+                }
+            });
+        });
+        return callbackHelper;
+    }
+
+    public CallbackHelper getTabsOpenedAndLoadedWaiter() {
+        final CallbackHelper callbackHelper = new CallbackHelper();
+        final TabModelSelector tabModelSelector =
+                mActivityTestRule.getActivity().getTabModelSelectorSupplier().get();
+        TestThreadUtils.runOnUiThreadBlocking(() -> {
+            tabModelSelector.getCurrentModel().addObserver(new TabModelObserver() {
+                @Override
+                public void didAddTab(
+                        Tab tab, int type, int creationState, boolean markedForSelection) {
+                    tab.addObserver(new EmptyTabObserver() {
+                        @Override
+                        public void onPageLoadFinished(Tab tab, GURL url) {
+                            callbackHelper.notifyCalled();
+                        }
+                    });
+                }
+            });
+        });
+        return callbackHelper;
+    }
+
+    public WebContents getWebContents() {
+        return mActivityTestRule.getActivity().getCurrentWebContents();
+    }
+
+    public int getTabCount() {
+        return mActivityTestRule.getActivity()
+                .getTabModelSelectorSupplier()
+                .get()
+                .getTotalTabCount();
+    }
+
+    // Note: Use either setOnAdMatchedLatch XOR setOnAdMatchedExpectations
+    public void setOnAdMatchedLatch(final CountDownLatch countDownLatch) {
+        Assert.assertTrue(
+                mObserver.countDownLatch == null || mObserver.countDownLatch.getCount() == 0);
+        mObserver.countDownLatch = countDownLatch;
+    }
+
+    // Note: Use either setOnAdMatchedLatch XOR setOnAdMatchedExpectations
+    public CountDownLatch setOnAdMatchedExpectations(
+            final Set<String> onBlocked, final Set<String> onAllowed) {
+        Assert.assertTrue(
+                mObserver.countDownLatch == null || mObserver.countDownLatch.getCount() == 0);
+        mObserver.countDownLatch = new CountDownLatch(1);
+        mObserver.expectedBlocked = onBlocked;
+        mObserver.expectedAllowed = onAllowed;
+        return mObserver.countDownLatch;
+    }
+
+    public boolean isBlocked(final String url) {
+        return mObserver.isBlocked(url);
+    }
+
+    public boolean isPopupBlocked(final String url) {
+        return mObserver.isPopupBlocked(url);
+    }
+
+    public int numBlockedByType(final AdblockContentType type) {
+        return mObserver.numBlockedByType(type);
+    }
+
+    public int numBlockedPopups() {
+        return mObserver.numBlockedPopups();
+    }
+
+    public int numAllowedByType(final AdblockContentType type) {
+        return mObserver.numAllowedByType(type);
+    }
+
+    public int numAllowedPopups() {
+        return mObserver.numAllowedPopups();
+    }
+
+    public boolean isAllowed(final String url) {
+        return mObserver.isAllowed(url);
+    }
+
+    public boolean isPageAllowed(final String url) {
+        return mObserver.isPageAllowed(url);
+    }
+
+    public boolean isPopupAllowed(final String url) {
+        return mObserver.isPopupAllowed(url);
+    }
+
+    public void loadUrl(final String url) throws InterruptedException, TimeoutException {
+        mActivityTestRule.loadUrl(url, TEST_TIMEOUT_SEC);
+    }
+
+    public void loadUrlWaitForContent(final String url)
+            throws InterruptedException, TimeoutException {
+        loadUrl(url);
+        TestVerificationUtils.verifyCondition(mActivityTestRule,
+                "document.getElementsByClassName('testcase-waiting-content').length == 0");
+    }
+
+    public int numBlocked() {
+        return mObserver.blockedInfos.size();
+    }
+
+    public int numAllowed() {
+        return mObserver.allowedInfos.size();
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTest.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTest.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestPagesWebsocketTest.java
@@ -0,0 +1,77 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import androidx.test.filters.LargeTest;
+
+import org.junit.After;
+import org.junit.Assert;
+import org.junit.Before;
+import org.junit.Rule;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+
+import org.chromium.base.test.util.CommandLineFlags;
+import org.chromium.base.test.util.Feature;
+import org.chromium.chrome.browser.flags.ChromeSwitches;
+import org.chromium.chrome.test.ChromeBrowserTestRule;
+import org.chromium.chrome.test.ChromeJUnit4ClassRunner;
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.concurrent.CountDownLatch;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.TimeoutException;
+
+@RunWith(ChromeJUnit4ClassRunner.class)
+@CommandLineFlags.Add({ChromeSwitches.DISABLE_FIRST_RUN_EXPERIENCE})
+public class TestPagesWebsocketTest {
+    @Rule
+    public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule();
+    @Rule
+    public ChromeTabbedActivityTestRule mActivityTestRule = new ChromeTabbedActivityTestRule();
+    private TestPagesTestsHelper mHelper = new TestPagesTestsHelper();
+
+    @Before
+    public void setUp() {
+        mHelper.setUp(mActivityTestRule);
+        mHelper.addCustomFilter(
+                String.format("$websocket,domain=%s", TestPagesTestsHelper.TESTPAGES_DOMAIN));
+    }
+
+    @After
+    public void tearDown() {
+        mHelper.tearDown();
+    }
+
+    @Test
+    @LargeTest
+    @Feature({"adblock"})
+    public void testVerifyWebsocketFilter() throws TimeoutException, InterruptedException {
+        final String wssUrl =
+                String.format("wss://%s/websocket", TestPagesTestsHelper.TESTPAGES_DOMAIN);
+        final CountDownLatch countDownLatch =
+                mHelper.setOnAdMatchedExpectations(new HashSet<>(Arrays.asList(wssUrl)), null);
+        mHelper.loadUrl(TestPagesTestsHelper.FILTER_TESTPAGES_TESTCASES_ROOT + "websocket");
+        // Wait with 10 seconds max timeout
+        countDownLatch.await(10, TimeUnit.SECONDS);
+        Assert.assertEquals(1, mHelper.numBlockedByType(AdblockContentType.CONTENT_TYPE_WEBSOCKET));
+        Assert.assertTrue(mHelper.isBlocked(wssUrl));
+    }
+}
diff --git a/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java
new file mode 100644
--- /dev/null
+++ b/components/adblock/android/javatests/src/org/chromium/components/adblock/TestVerificationUtils.java
@@ -0,0 +1,166 @@
+/*
+ * This file is part of eyeo Chromium SDK,
+ * Copyright (C) 2006-present eyeo GmbH
+ *
+ * eyeo Chromium SDK is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 3 as
+ * published by the Free Software Foundation.
+ *
+ * eyeo Chromium SDK is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with eyeo Chromium SDK.  If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.chromium.components.adblock;
+
+import org.junit.Assert;
+
+import org.chromium.chrome.test.ChromeTabbedActivityTestRule;
+import org.chromium.content_public.browser.test.util.JavaScriptUtils;
+
+import java.util.concurrent.TimeoutException;
+
+public class TestVerificationUtils {
+    public enum IncludeSubframes {
+        YES,
+        NO,
+    }
+
+    private static final String STATUS_OK = "\"OK\"";
+
+    private static final String MATCHES_HIDDEN_FUNCTION = "let matches = function(element) {"
+            + "  return window.getComputedStyle(element).display == \"none\";"
+            + "}";
+
+    private static final String MATCHES_DISPLAYED_FUNCTION = "let matches = function(element) {"
+            + "  return window.getComputedStyle(element).display != \"none\";"
+            + "}";
+
+    private static final String COUNT_ELEMENT_FUNCTION =
+            "let countElements = function(selector, includeSubframes) {"
+            + "  let count = 0;"
+            + "  for (let element of document.querySelectorAll(selector)) {"
+            + "    if (matches(element))"
+            + "      ++count;"
+            + "  }"
+            + "  if (includeSubframes) {"
+            + "    for (let frame of document.querySelectorAll(\"iframe\")) {"
+            + "      for (let element of frame.contentWindow.document.body.querySelectorAll(selector)) {"
+            + "        if (matches(element))"
+            + "          ++count;"
+            + "      }"
+            + "    }"
+            + "  }"
+            + "  return count;"
+            + "}";
+
+    private static final String WAIT_FOR_COUNT_FUNCTION_WRAPPER = "(function () {"
+            + "%s\n" // matches() defintion placeholder
+            + "%s\n" // countElements() defintion placeholder
+            + "%s\n" // WAIT_FUNCTION placeholder which calls countElements() as a predicate
+            + "}());";
+
+    // Poll every 100 ms until condition is met or 10 seconds timeout occurs
+    private static final String WAIT_FUNCTION = "let repeat = 100;"
+            + "const id = setInterval(() => {"
+            + "  --repeat;"
+            + "  if (%s) {" // predicate placeholder
+            + "    clearInterval(id);"
+            + "    domAutomationController.send('OK');"
+            + "  } else if (repeat == 0) {"
+            + "    clearInterval(id);"
+            + "    domAutomationController.send('Timeout');"
+            + "  }"
+            + "}, 100);";
+
+    private static void verifyMatchesCount(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final int num, final String matchesFunction, final String selector,
+            IncludeSubframes includeSubframes) throws TimeoutException {
+        final String boolIncludeSubframes =
+                includeSubframes == IncludeSubframes.YES ? "true" : "false";
+        final String predicate = String.format(
+                "countElements(\"%s\", %s) == %d", selector, boolIncludeSubframes, num);
+        final String waitFunction = String.format(WAIT_FUNCTION, predicate);
+        final String js = String.format(WAIT_FOR_COUNT_FUNCTION_WRAPPER, matchesFunction,
+                COUNT_ELEMENT_FUNCTION, waitFunction);
+        final String result =
+                JavaScriptUtils.runJavascriptWithAsyncResult(mActivityTestRule.getActivity()
+                                                                     .getTabModelSelectorSupplier()
+                                                                     .get()
+                                                                     .getCurrentTab()
+                                                                     .getWebContents(),
+                        js);
+        Assert.assertEquals(STATUS_OK, result);
+    }
+
+    public static void verifyHiddenCount(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final int num, final String selector) throws TimeoutException {
+        verifyHiddenCount(mActivityTestRule, num, selector, IncludeSubframes.YES);
+    }
+
+    public static void verifyHiddenCount(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final int num, final String selector, final IncludeSubframes includeSubframes)
+            throws TimeoutException {
+        verifyMatchesCount(
+                mActivityTestRule, num, MATCHES_HIDDEN_FUNCTION, selector, includeSubframes);
+    }
+
+    public static void verifyDisplayedCount(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final int num, final String selector) throws TimeoutException {
+        verifyDisplayedCount(mActivityTestRule, num, selector, IncludeSubframes.YES);
+    }
+
+    public static void verifyDisplayedCount(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final int num, final String selector, final IncludeSubframes includeSubframes)
+            throws TimeoutException {
+        verifyMatchesCount(
+                mActivityTestRule, num, MATCHES_DISPLAYED_FUNCTION, selector, includeSubframes);
+    }
+
+    public static void verifyCondition(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final String predicate) throws TimeoutException {
+        final String waitFunction = String.format(WAIT_FUNCTION, predicate);
+        Assert.assertEquals(STATUS_OK,
+                JavaScriptUtils.runJavascriptWithAsyncResult(mActivityTestRule.getActivity()
+                                                                     .getTabModelSelectorSupplier()
+                                                                     .get()
+                                                                     .getCurrentTab()
+                                                                     .getWebContents(),
+                        waitFunction));
+    }
+
+    public static void verifyGreenBackground(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final String elemId) throws TimeoutException {
+        verifyCondition(mActivityTestRule,
+                "window.getComputedStyle(document.getElementById('" + elemId
+                        + "')).backgroundColor == 'rgb(13, 199, 75)'");
+    }
+
+    // For some cases it is better to rely on page script testing element
+    // rather than invent a specific script to check condition. For example
+    // checks for rewrite filters replaces content proper way.
+    public static void verifySelfTestPass(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final String elemId) throws TimeoutException {
+        verifyCondition(mActivityTestRule,
+                "document.getElementById('" + elemId
+                        + "').getAttribute('data-expectedresult') == 'pass'");
+    }
+
+    public static void expectResourceBlocked(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final String elemId) throws TimeoutException {
+        verifyCondition(mActivityTestRule,
+                "window.getComputedStyle(document.getElementById('" + elemId
+                        + "')).display == 'none'");
+    }
+
+    public static void expectResourceShown(final ChromeTabbedActivityTestRule mActivityTestRule,
+            final String elemId) throws TimeoutException {
+        verifyCondition(mActivityTestRule,
+                "window.getComputedStyle(document.getElementById('" + elemId
+                        + "')).display == 'inline'");
+    }
+}
--
2.25.1
